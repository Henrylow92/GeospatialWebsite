---
title: "Hands-On Exercise 02"
author: "Henry Low"
date: "Sep 1 2024"
date-modified: "last-modified"
execute:
  evalu: true
  echo: true
  message: false
  freeze: true
format: html
editor: visual
---



# Data Sources

*(saved under 'data' folder)*\
From [data.gov.sg](https://data.gov.sg/):\
- [Master Plan 2014 Subzone Boundary (Web) (SHP)](https://data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary&page=1&resultId=d_d14da225fccf921049ab64238ff473d9)\
- [Master Plan 2014 Subzone Boundary (Web) (KML)](https://data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary&page=1&resultId=d_5cb80a95445f236737f6bc2bfe5f159d)\
- [Childcare](https://data.gov.sg/datasets?query=child+care&page=1&resultId=d_5d668e3f544335f8028f546827b773b4)

Others:\
- [CostalOutline from SLA](https://www.sla.gov.sg/geospatial-development-and-services/digitised-land-information)

# Chapter 4: 1st Order Spatial Point Patterns Analysis Methods

## 4.1 Setting Up

### 4.1.1 Loading the R packages



```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```



### 4.1.2 Importing spatial data



```{r}
# Load childcare dataset
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414) # Project to SVY21
```

```{r}
# Load costaloutline dataset
sg_sf <- st_read(dsn = "data/CostalOutline", layer="CostalOutline") %>%
  st_set_crs(., 3414) # Change CRS attribute to 3414
```

```{r}
# Load MP14 Subzone dataset
mpsz_sf <- st_read(dsn = "data/MasterPlan2014SubzoneBoundaryWebSHP", layer = "MP14_SUBZONE_WEB_PL") %>%
  st_set_crs(., 3414) # Change CRS attribute to 3414
```



## 4.2 Exploratory Plots



```{r}
# Map MP14 Sf with Childcare Sf 
tm_shape(mpsz_sf) + 
  tm_polygons() + 
tm_shape(childcare_sf) + 
  tm_bubbles(size = 0.01, col = "black")
```

```{r}
# Dynamic map with view tmap_mode (requires leaflet package)
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

```{r}
# Set tmap_mode back to plot
tmap_mode('plot')
```



## 4.3 Geospatial Data Wrangling

### 4.3.1 Convert Sf dataframes into Spatial\* class



```{r}
# Convert sf dataframe to spatial class
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

```{r}
# Information of childcare spatial class
print(childcare)
```

```{r}
# Information of MP Subzone spatial class
print(mpsz)
```

```{r}
# Information of costaloutline spatial class
print(sg)
```



### 4.3.2 Convert Spatial\* class into generic sp format



```{r}
# Information of costaloutline spatial class
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
# Information of childcare sp object
print(childcare_sp)
```

```{r}
# Information of costaloutline sp object
print(sg_sp)
```



*Spatial\* classes are specific classes for handling points, lines, polygons, grids, etc., each with dedicated methods and structures.\
A generic sp object refers to any object created using the sp package, including all Spatial\* classes.*

### 4.3.3 Convert generic sp format into spatstat's ppp format



```{r}
# Convert and print information of childcare ppp format
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

```{r}
# Plot childcare_ppp
plot(childcare_ppp)
```

```{r}
# Check summary statistics of childcare_ppp
summary(childcare_ppp)
```



### 4.3.4 Check for duplicates



```{r}
# Check if childcare_ppp contains duplicates 
any(duplicated(childcare_ppp))
```

```{r}
# Check number of duplicated point events
sum(multiplicity(childcare_ppp) > 1)
```

```{r}
# Check number of duplicated point events
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
# Set tmap_mode back to plot
tmap_mode('plot')
```

```{r}
# Use jittering to remove duplicates (if any)
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)

# Check if contains any duplicated points
any(duplicated(childcare_ppp_jit))
```



### 4.3.5 Owin Object



```{r}
# Create owin object from sf object
sg_owin <- as.owin(sg_sf)
# Plot owin output object
plot(sg_owin)
```

```{r}
# Show summary statistics of owin object
summary(sg_owin)
```

```{r}
# Combine point events object and owin object
childcareSG_ppp = childcare_ppp[sg_owin]
# Show summary statistics of combined object
summary(childcareSG_ppp)
```

```{r}
# Plot newly derived childcareSG_ppp
plot(childcareSG_ppp)
```



## 4.4 First-order Spatial Point Patterns Analysis



```{r}
# Computing kernel density estimation
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian")
# Plot derived kernel density
plot(kde_childcareSG_bw)
```

```{r}
# Retrieve bandwidth used to compute kde layer
bw <- bw.diggle(childcareSG_ppp)
bw
```

```{r}
# Use rescale.ppp to convert unit of measurement from meter to kilometer
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
# Re-run density with rescaled dataset
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
# Plot updated density
plot(kde_childcareSG.bw)
```

```{r}
# Check bandwidth return by other calculation methods
bw.CvL(childcareSG_ppp.km)
cat("------------------------------------------------------------------\n")
bw.scott(childcareSG_ppp.km)
cat("------------------------------------------------------------------\n")
bw.ppl(childcareSG_ppp.km)
cat("------------------------------------------------------------------\n")
bw.diggle(childcareSG_ppp.km)
```

```{r}
# Compare output using bw.diggle and bw.ppl methods
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2), mai=c(0, 0.1, 0.1, 0.3),  oma=c(0, 0, 0, 0), cex.main = 0.8, cex.axis = 0.6)
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

```{r}
# Compare bw.ppl output for other kernel methods  
par(mfrow=c(2,2), mai=c(0, 0.1, 0.1, 0.3),  oma=c(0, 0, 0, 0), cex.main = 0.8, cex.axis = 0.6)
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```



### 4.4.1 Fixed and Adaptive KDE



```{r}
# Compute kde layer with a fixed bandwidth
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

```{r}
# Compute kde layer with an adaptive bandwidth
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

```{r}
# Compare both fixed and adaptive KDE output
par(mfrow=c(1,2), mai=c(0, 0.1, 0.1, 0.3),  oma=c(0, 0, 0, 0), cex.main = 0.8, cex.axis = 0.6)
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

```{r}
# # Convert KDE output into grid object
gridded_kde_childcareSG_bw <- maptools::as.SpatialGridDataFrame.im(kde_childcareSG.bw) # Use maptools
spplot(gridded_kde_childcareSG_bw)
```

```{r}
# Convert kde_childcareSG.bw to raster
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
kde_childcareSG_bw_raster
```

```{r}
# Assign CRS information to Rasterlayer
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

```{r}
# Visualize raster with tmap
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```



#### 4.4.1.1 Comparing Spatial Point Patterns with KDE



```{r}
# Extract study area
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")

# Plot Ponggol
par(mfrow=c(2,2), cex.main=0.8)
plot(pg, main = "Ponggol")
```

```{r}
# Extract Tampines
par(mfrow=c(2,2), cex.main=0.8)
plot(tm, main = "Tampines")
```

```{r}
# Extract Choa Chu Kang
par(mfrow=c(2,2), cex.main=0.8)
plot(ck, main = "Choa Chu Kang")
```

```{r}
# Extract Jurong West
par(mfrow=c(2,2), cex.main=0.8)
plot(jw, main = "Jurong West")
```

```{r}
## Using 
# Convert sf objects into owin objects
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)

# Combine childcare points and study area
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]

# Transform unit of measurement from metre to kilometre
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")

# Plot the 4 study areas and location of childcare centres
par(mfrow=c(2,2),  mai=c(0.2, 0.2, 0.2, 0.2), cex.main=0.8, cex.axis=0.8)

# par(mfrow=c(1,1))  # Reset to single plot layout
# par(cex.main=1, cex.lab=1, cex.axis=1)  # Reset font sizes to default

plot(childcare_pg_ppp.km, main="Punggol", cex = 0.5)
plot(childcare_tm_ppp.km, main="Tampines", cex = 0.5)
plot(childcare_ck_ppp.km, main="Choa Chu Kang", cex = 0.5)
plot(childcare_jw_ppp.km, main="Jurong West", cex = 0.5)
```

```{r}
# Plot KDE of planning areas with bw.diggle method
par(mfrow=c(2,2),  mai=c(0.2, 0.2, 0.2, 0.2),  oma=c(0, 0, 0, 0), cex.main = 0.8, cex.axis = 0.7)
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

```{r}
# Plot KDE of planning areas with fixed bandwidth
par(mfrow=c(2,2), mai=c(0.2, 0.2, 0.2, 0.2),  oma=c(0, 0, 0, 0), cex.main = 0.8, cex.axis = 0.7)
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```



### 4.4.2 Nearest Neighbour Analysis



```{r}
# Use Clark and Evans Test for full data
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```



*Conclusion: Points on childcareSG_ppp are more clustered than randomly distributed (Accept H1) at 95% confidence level (p-value \< 0.05)*



```{r}
# Use Clark and Evans Test for Choa Chu Kang
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

```{r}
# Use Clark and Evans Test for Tampines
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```



# Chapter 5: 2nd Order Spatial Point Patterns Analysis Methods

## 5.1 Using G-Function

*G function measures the distribution of the distances from an arbitrary event to its nearest event*



```{r}
# Compute G-function for Choa Chu Kang
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

```{r}
# Complete Spatial Randomness Test (Monte Carlo)
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
# Plot results
plot(G_CK.csr)
```

```{r}
# Compute G-function for Tampines
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

```{r}
# Complete Spatial Randomness Test (Monte Carlo)
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
# Plot results
plot(G_tm.csr)
```



## 5.2 Using F-Function

*F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary*



```{r}
# Compute F-function for Choa Chu Kang
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

```{r}
# Complete Spatial Randomness Test (Monte Carlo)
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
# Plot results
plot(F_CK.csr)
```

```{r}
# Compute F-function for Tampines
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

```{r}
# Complete Spatial Randomness Test (Monte Carlo)
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
# Plot results
plot(F_tm.csr)
```



## 5.3 Using K-Function

*K-function measures the number of events found up to a given distance of any particular event.*



```{r}
# Compute K-function for Choa Chu Kang
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

```{r}
# Complete Spatial Randomness Test (Monte Carlo)
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
# Plot results
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

```{r}
# Compute K-function for Tampines
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

```{r}
# Complete Spatial Randomness Test (Monte Carlo)
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
# Plot results
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```



## 5.4 Using L-Function



```{r}
# Compute L-function for Choa Chu Kang
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

```{r}
# Complete Spatial Randomness Test (Monte Carlo)
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
# Plot results
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

```{r}
# Compute L-function for Tampines
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

```{r}
# Complete Spatial Randomness Test (Monte Carlo)
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
# Plot results
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```

