---
title: "Hands-On Exercise 01"
author: "Henry Low"
date: "Aug 30 2024"
date-modified: "last-modified"
execute:
  evalu: true
  echo: true
  message: false
  freeze: true
format: html
editor: visual
---

# Data Sources (saved under 'data' folder)

From [data.gov.sg](https://data.gov.sg/):\
- [Master Plan 2014 Subzone Boundary (Web) (SHP)](https://data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary&page=1&resultId=d_d14da225fccf921049ab64238ff473d9)\
- [Master Plan 2014 Subzone Boundary (Web) (KML)](https://data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary&page=1&resultId=d_5cb80a95445f236737f6bc2bfe5f159d)\
- [Pre-Schools Location (KML)](https://data.gov.sg/datasets?query=Pre-Schools+Location&page=1&resultId=d_a72bcd23e208d995f3bd4eececeaca43)

Others:\
[Cycling Path from LTADataMall](https://datamall.lta.gov.sg/content/dam/datamall/datasets/Geospatial/CyclingPath_Jul2024.zip)\
[Listings from Airbnb (listings.csv)](https://insideairbnb.com/get-the-data/)\
[Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling from Singstat](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data)

# Chapter 1: Geospatial Data Science with R

## 1.1 Setting Up

### 1.1.1 Loading the R packages

```{r}
pacman::p_load(tidyverse, sf, tmap)
```

### 1.1.2 Importing Datasets

```{r}
# Load MP14_SUBSONZE_WEB_PL
mpsz = st_read(dsn = "data/MasterPlan2014SubzoneBoundaryWebSHP", layer = "MP14_SUBZONE_WEB_PL") # Multipolygon Features
```

```{r}
# Load Cycling Path
cyclingpath = st_read(dsn = "data/CyclingPath_Jul2024", layer = "CyclingPathGazette") # Multilinestring Feature
```

```{r}
# Load PreSchool 
preschool = st_read("data/PreSchoolsLocation.kml") # Point Feature (WGS84 CRS)
```

## 1.2 Data Exploration

```{r}
# Prints basic information of the feature class 
st_geometry(mpsz)
```

```{r}
# More detailed information of information in the dataframe
glimpse(mpsz)
```

```{r}
# Prints first n records of the dataframe
head(mpsz, n = 5)
```

## 1.3 Data Visualization

```{r}
# Plot all attributes
plot(mpsz)
```

```{r}
# Plot only geometry
plot(st_geometry(mpsz))
```

```{r}
# Plot specific sf object
plot(mpsz["PLN_AREA_C"])
```

## 1.4 Projection

```{r}
# Check coordinate system of simple feature dataframe
st_crs(mpsz)
```

```{r}
# Assign correct EPSG Code SVY21 CRS
mpsz3414 <- st_set_crs(mpsz, 3414) # Change CRS attribute only, does not reproject underlying coordinates
st_crs(mpsz3414) # New Usage Attribute, updated ID attribute
```

```{r}
# Transform preschool sf dataframe from WGS84 to SVY21
preschool3414 <- st_transform(preschool, crs = 3414)
st_geometry(preschool3414)
```

## 1.5 Transforming Aspatial Data

```{r}
# Importing Aspatial Data
listings <- read_csv("data/listings.csv")
list(listings) 
```

```{r}
# Convert dataframe into sf dataframe
listings_sf <- st_as_sf(listings,                                          # Dataframe
                        coords = c("longitude", "latitude"),               # Column names for coordinates 
                        crs=4326) %>%                                      # Coordinate system in EPSG format (specific to country - refer to epsg.io)
  st_transform(crs = 3414)
glimpse(listings_sf)
```

## 1.6 Geoprocessing

Hypothetical Scenario 1 - ascertain 5 metres of reserved land on both sides of current cycling to be acquired

```{r}
# Use st_buffer to compute buffer around the cycling paths
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs = 30) # nQuadSegs : number of segments per quadrant
# Calculate area of buffers
buffer_cycling$AREA <- st_area(buffer_cycling)
# Return total land involved
sum(buffer_cycling$AREA)
```

Hypotethical Scenario 2 - find out number of pre-schools in each Planning Subzone

```{r}
# Count number of preschools within each planning subzone
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
# Summary statistics
summary(mpsz3414$`PreSch Count`)
cat("------------------------------------------------------------------\n")
# Planning Subzone with most pre-schools
top_n(mpsz3414, 1, `PreSch Count`)
```

Hypotethical Scenario 3 - Analyze density of pre-school by planning subzone

```{r}
# Calculate density - Preschool Count/Area
mpsz3414 <- mpsz3414 %>%
  mutate(Area = st_area(.)) %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000) # Or simply mutate(`PreSch Density` = `PreSch Count`/st_area(.) * 1000000)

# Print simple histogram of pre-school density
hist(mpsz3414$`PreSch Density`)
```

```{r}
# A more useful visualization of pre-school density
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

```{r}
# Show relationship between pre-school density and pre-school count
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```

# Chapter 2: Thematic Mapping and GeoVisualisation with R

## 2.1 Additional Setup

```{r}
# Load population data
popdata <- read_csv("data/respopagesextod2011to2020.csv")
# Check data
glimpse(popdata)
cat("------------------------------------------------------------------\n")
# Check distinct values of AG
unique(popdata$AG)
```

## 2.1.1 Prepare 2020 population data

```{r}
# Calculate population counts of different demographic groups  & dependency ratio by sub regions
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(select(., `0_to_4`, `5_to_9`, `10_to_14`, `15_to_19`, `20_to_24`)),
         `ECONOMY ACTIVE` = rowSums(select(., `25_to_29`, `30_to_34`, `35_to_39`, `40_to_44`, `45_to_49`, `50_to_54`, `55_to_59`, `60_to_64`)),
         AGED = rowSums(select(., `65_to_69`, `70_to_74`, `75_to_79`, `80_to_84`, `85_to_89`, `90_and_over`))) %>%
  mutate(`TOTAL`= (`YOUNG` + `ECONOMY ACTIVE` + `AGED`),
         `DEPENDENCY` = ((`YOUNG` + `AGED`)/`ECONOMY ACTIVE`)) %>%  
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
# Check processed data
head(popdata2020)
```

## 2.1.2. Combine attribute data and geospatial data

```{r}
# Convert attribute fields to upper case for joining
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
# Left join to mpsz data
mpsz_pop2020 <- left_join(mpsz, popdata2020, by = c("SUBZONE_N" = "SZ"))
# Check merged data
head(mpsz_pop2020)
# Save data as rds (compressed form)
write_rds(mpsz_pop2020, "data/mpszpop2020.rds")
```

## 2.2 Choropleth Mapping Geospatial Data

### 2.2.1 Exploring Choropleth Mapping

```{r}
# Use qtm function from tmap to plot choropleth map
tmap_mode("plot")
qtm(mpsz_pop2020, fill = "DEPENDENCY")
```

```{r}
# Use tmap's drawing elements for more customized choropleth map
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

```{r}
# Base map
tm_shape(mpsz_pop2020) + 
  tm_polygons()

```

```{r}
# Using polygons
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

```{r}
# Using fill instead of polygons
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

```{r}
# Using border and fill - a customized version of tm_polygons
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

### 2.2.2 Data Classification Methods

```{r}
# Classification using built in quantile method (5 classes)
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

```{r}
# Classification using built in equal method (5 classes)
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

#### 2.2.2.1 Classification with custom breaks

```{r}
# Check data distribution 
summary(mpsz_pop2020$DEPENDENCY)
```

```{r}
# Classification using custom breaks
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

### 2.2.3 Aesthetic Features

#### 2.2.3.1 Color Scheme

```{r}
# Using ColorBrewer palette
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

```{r}
# Reverse color shading
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "-Blues") +
  tm_borders(alpha = 0.5)
```

#### 2.2.3.2 Map Layout

```{r}
# Customized legend
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

```{r}
# Different map styles
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

```{r}
# Fully customized with other map furniture
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Reds",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

```{r}
# Multiple small choropleth maps can be defined by specific columns in tm_fill
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white") # Reset map style to default
```

```{r}
# Additional arguments can be used to customize each choropleth map separately
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

```{r}
# Use tm_facets to create multiple small maps by groups
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

```{r}
# Use tm_arrage to create and combine multiple individual maps
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```
