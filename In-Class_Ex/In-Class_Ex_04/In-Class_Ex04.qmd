---
title: "In Class Exercise 04"
author: "Henry Low"
date: "Sep 16 2024"
date-modified: "last-modified"
execute:
  evalu: true
  echo: true
  message: false
  freeze: true
format: html
editor: visual
---

# Data Sources

*(saved under 'data' folder)*\
Hunan county boundary layer - geospatial dataset\
Hunan_2012 - csv dataset containing Hunan's 2012 local development indicators

# Geographically Weigthed Summary Statistics - gwModel methods

Other methods that will be useful\
- gwr (regression methods).Â  - bandwidth selection (for fixed and adaptive methods).\
- principal component analysis

## 1.1 Setting Up

### 1.1.1 Loading the R packages

```{r}
pacman::p_load(sf, ggstatsplot, tmap, tidyverse, knitr, GWmodel)
```

### 1.1.2 Importing spatial data

::: panel-tabset
# Hunan Shapefile

```{r}
# Load shapefile
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

```{r}
# Check crs
st_crs(hunan)
```

```{r}
# Check crs
glimpse(hunan)
```

# Hunan 2012

```{r}
# Load csv file
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
# Check file
glimpse(hunan2012)
```
:::

### 1.1.3 Merging both datasets

Both datasets have the common field "County"

```{r}
hunan <- left_join(hunan, hunan2012, by = "County") %>%
  # select(1:4, 7, 15)
  select(`NAME_2`, `ID_3`, `NAME_3`,`County`, `GDPPC`, `GIO`, `Agri`, `Service`) # Using Column names for readability - Dont have to specify `geometry`
# See result
glimpse(hunan)
```

## 1.2 Geospatial Wrangling

### 1.2.1 Mapping GDPPC

```{r}

basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC") + 
  tm_layout(legend.text.size = 0.6,    
            legend.title.size = 0.8    
            )
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

### 1.2.1 Convert sf to SpatialPolygonDataFrame

```{r}
hunan_sp <- hunan %>%
  as_Spatial()
```

In spatial dataframe, it is stored as a list. Geospatial data (`geometry` field) is stored in a separate list (polygons)

# 2. Geographically Weighted Summary Statistics with adaptive bandwidth

# 2.1 Determine adaptive bandwidth

::: panel-tabset
# Cross-validation

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1, # Dependent: GDPPC, Independent - assume 1
                data = hunan_sp,
                approach = "CV",
                adaptive = TRUE, # If FALSE - fixed bandwidth
                kernel = "bisquare",
                longlat =  T)

bw_CV
```

# AIC

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1,
                data = hunan_sp,
                approach = "AIC",
                adaptive = TRUE,
                kernel = "bisquare",
                longlat =  T)

bw_AIC
```
:::

# 2.2 Determine fixed bandwidth

::: panel-tabset
# Cross-validation

```{r}
bw_CV_fixed <- bw.gwr(GDPPC ~ 1, 
                data = hunan_sp,
                approach = "CV",
                adaptive = FALSE,
                kernel = "bisquare",
                longlat =  T)

bw_CV_fixed
```

# AIC

```{r}
bw_AIC_fixed <- bw.gwr(GDPPC ~ 1,
                data = hunan_sp,
                approach = "AIC",
                adaptive = FALSE,
                kernel = "bisquare",
                longlat =  T)

bw_AIC_fixed
```
:::

It may be recommended to use adaptive distance in this case since both methods for adaptive distance are consistent (22) as compared to the methods for fixed distance.

# 2.3 Geographically Weighted Summary Statistics with Adaptive Bandwidth

```{r}
# Using adaptive bandwidth 
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T)
```

```{r}
# Extract output data and convert into dataframe
gwstat_df <- as.data.frame(gwstat$SDF)

# Append dataframe to hunan sf dataframe
hunan_gstat <- cbind(hunan, gwstat_df)
```

```{r}
# Plot results
tm_shape(hunan_gstat) + 
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geographically weighted mean",
            main.title.position = "center",
            main.title.size = 0.9,
            legend.text.size = 0.6,  # Adjust the size of the legend text
            legend.title.size = 0.8,
            legend.height = 0.7,
            legend.width = 1.50,
            frame = TRUE)   
```

# 2.4 Geographically Weighted Summary Statistics with Fixed Bandwidth

```{r}
# Using fixed bandwidth 
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC_fixed,
               kernel = "bisquare",
               adaptive = FALSE,
               longlat = T)

```

```{r}
# Extract output data and convert into dataframe
gwstat_df <- as.data.frame(gwstat$SDF)

# Append dataframe to hunan sf dataframe
hunan_gstat <- cbind(hunan, gwstat_df)
```

```{r}
# Plot results
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geographically weighted mean",
            main.title.position = "center",
            main.title.size = 0.9,
            legend.text.size = 0.6,  # Adjust the size of the legend text
            legend.title.size = 0.8,
            legend.height = 0.7,
            legend.width = 1.50,
            frame = TRUE) 
```

# 2.5 Geographically Weighted Correlation with Adaptive Bandwidth

```{r}
ggscatterstats(
  data = hunan2012, 
  x = Agri, 
  y = GDPPC,
  xlab = "Gross Agriculture Output", ## label for the x-axis
  ylab = "GDP per capita", 
  label.var = County, 
  label.expression = Agri > 10000 & GDPPC > 50000, 
  point.label.args = list(alpha = 0.7, size = 4, color = "grey50"),
  xfill = "#CC79A7", 
  yfill = "#009E73", 
  title = "Relationship between GDP PC and Gross Agriculture Output")
```

```{r}
# Determine the bandwidth
bw <- bw.gwr(GDPPC ~ GIO, 
             data = hunan_sp, 
             approach = "AICc", 
             adaptive = TRUE)
```

```{r}
# Compute the gwCorrelation
gwstats <- gwss(hunan_sp, 
                vars = c("GDPPC", "GIO"), 
                bw = bw,
                kernel = "bisquare",
                adaptive = TRUE, 
                longlat = T)
```

```{r}
# Extract the results from gwss object
gwstat_df <- as.data.frame(gwstats$SDF) %>%
  select(c(12,13)) %>%
  rename(gwCorr = Corr_GDPPC.GIO,
         gwSpearman = Spearman_rho_GDPPC.GIO)
```

```{r}
# Column bind the results
hunan_Corr <- cbind(hunan, gwstat_df)
```

# 2.5 Visualising Local Correlation

::: panel-tabset
# Spearman Correlation

```{r}
# Visualize Spearman Correlation
tm_shape(hunan_Corr) +
  tm_fill("gwSpearman",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Spearman Rho",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.text.size = 0.6,
            legend.height = 0.7, 
            legend.width = 0.8,
            frame = TRUE)
```

# Pearson Correlation

```{r}
# Visualize Pearson Correlation
tm_shape(hunan_Corr) +
  tm_fill("gwCorr",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Correlation Coefficient",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.text.size = 0.6,
            legend.height = 0.7, 
            legend.width = 0.8,
            frame = TRUE)
```
:::
