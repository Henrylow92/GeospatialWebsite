---
title: "In Class Exercise 01"
author: "Henry Low"
date: "Aug 26 2024"
date-modified: "last-modified"
execute:
  evalu: true
  echo: true
  message: false
  freeze: true
format: html
editor: visual
---

## Loading the R packages

```{r}
pacman::p_load(tidyverse, sf, tmap, ggstatsplot)
```

## Working with Master Plan Planning Sub-zone Data

### Load Data

```{r}
# Load mpsz14_shp sf
mpsz14_shp <- st_read(dsn = "data/MasterPlan2014SubzoneBoundaryWebSHP/", layer = "MP14_SUBZONE_WEB_PL")
# mpsz14_kml <- st_read("data/MasterPlan2014SubzoneBoundaryWebKML.kml")
```

### Write mpsz14_shp sf dataframe to kml file

```{r}
st_write(mpsz14_shp, "data/MP14_SUBZONE_WEB_PL.kml", 
         delete_dsn = TRUE # Overwrite old file if exists
         )
```

## Working with Pre-school Location Data

```{r}
# 
preschool_ini <- st_read("data/PreSchoolsLocation.kml")
preschool <- st_read("data/PreSchoolsLocation.kml") %>%
  st_transform(crs = 3414) # Transform (Grid Projection) from GRS to CRS 
#
presch_geo <- st_read("data/PreSchoolsLocation.geojson") 
```

## Working with Master Plan 2019 Subzone Boundary Data

```{r}
# Load Master Plan 2019 Subzone (No Sea)
mpsz19_shp_ini <- st_read(dsn = "data/MPSZ-2019/", layer = "MPSZ-2019")
mpsz19_shp <- st_read(dsn = "data/MPSZ-2019/", layer = "MPSZ-2019") %>% 
  st_transform(crs = 3414) # Transform (Grid Projection) from GRS to CRS 

```

```{r}
# KML File
mpsz19_kml <- st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.KML")
```

```{r}
# Check Coordinate system of mpsz sf dataframe
st_crs(mpsz19_shp_ini)
```
```{r}
# Check Coordinate system of preschool sf dataframe
st_crs(preschool_ini)
```

## Geospatial Data Wrangling
```{r}
# Add preschool count - number of preschools which intersects with each polygon
mpsz19_shp <- mpsz19_shp %>%
  mutate(`PreSch Count` = lengths(
    st_intersects(mpsz19_shp, preschool)))
```

```{r}
# Compute density - count/area
mpsz19_shp <- mpsz19_shp %>%
  mutate(Area = units::drop_units(
    st_area(.)),
    `PreSch Density` = `PreSch Count` / Area * 1000000
  )
```

## Statistical Analysis

```{r}
mpsz19_shp$`PreSch Density` <- as.numeric(as.character(mpsz19_shp$`PreSch Density`))
mpsz19_shp$`PreSch Count` <- as.numeric(as.character(mpsz19_shp$`PreSch Count`)) 
mpsz19_shp_df <- as.data.frame(mpsz19_shp)

ggscatterstats(data = mpsz19_shp_df,
               x = `PreSch Density`,
               y = `PreSch Count`,
               type = "parametric")
```

## Working with Population Data

```{r}
# Load Population Data
popdata <- read_csv("data/respopagesextod2023.csv")

# Data Wrangling
popdata2023 <- popdata %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from=AG, 
              values_from=POP) 

# See age groups
colnames(popdata2023)
```

```{r}
# Derive PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY 
popdata2023 <- popdata %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(select(., `0_to_4`, `5_to_9`, `10_to_14`, `15_to_19`, `20_to_24`)),
         `ECONOMY ACTIVE` = rowSums(select(., `25_to_29`, `30_to_34`, `35_to_39`, `40_to_44`, `45_to_49`, `50_to_54`, `55_to_59`, `60_to_64`)),
         AGED = rowSums(select(., `65_to_69`, `70_to_74`, `75_to_79`, `80_to_84`, `85_to_89`, `90_and_Over`))) %>%
  mutate(`TOTAL`= (`YOUNG` + `ECONOMY ACTIVE` + `AGED`),
         `DEPENDENCY` = ((`YOUNG` + `AGED`)/`ECONOMY ACTIVE`)) %>%  
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
head(popdata2023)
```

```{r}
# Convert values to upper case for joining
popdata2023 <- popdata2023 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper))

# Left join population data to mpsz
mpsz_pop2023 <- left_join(mpsz19_shp, popdata2023,
                          by = c("SUBZONE_N" = "SZ"))

# Left join mpsz to population data
pop2023_mpsz <- left_join(popdata2023, mpsz19_shp, 
                          by = c("SZ" = "SUBZONE_N"))
head(mpsz_pop2023)

```

```{r}
# Plot Choropleth Map of Dependency Ratio by Planning Subzone
tm_shape(mpsz_pop2023)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            bg.color = "#E3DAC9",
            main.title.size = 0.9,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.title.size = 0.9,
            legend.text.size = 0.6,
            frame = FALSE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1.5) +
  tm_scale_bar(width = 0.25) +
  tm_grid(lwd = 0.1, alpha = 0.15) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))

```

```{r}
# Analytical Map
mpsz_pop2023 <- mpsz_pop2023 %>%
  drop_na()

# Get function
get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}

# Percentile mapping function
percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(mpsz_pop2023) +
  tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}

# Run functions
percentmap("DEPENDENCY", mpsz_pop2023)

```

```{r}
# Boxbreaks function
boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}

# Get.var function
get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}

# Boxmap function
boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Blues",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("left",
                               "top"))
}

# Run functions
boxmap("DEPENDENCY", mpsz_pop2023)

```

```{r}
# Plot interactive box map
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
boxmap("DEPENDENCY", mpsz_pop2023)
```
