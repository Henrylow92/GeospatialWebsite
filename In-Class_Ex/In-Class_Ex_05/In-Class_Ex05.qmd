---
title: "In Class Exercise 05"
author: "Henry Low"
date: "Sep 23 2024"
date-modified: "last-modified"
execute:
  evalu: true
  echo: true
  message: false
  freeze: true
format: html
editor: visual
---

# Data Sources

*(saved under 'data' folder)*\

Hunan county boundary layer - geospatial dataset\
Hunan_2012 - csv dataset containing Hunan's 2012 local development indicators\

## Setting Up

### Loading the R packages

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse)
```

### Importing spatial data

::: panel-tabset
# Hunan Shapefile

```{r}
# Load shapefile
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

```{r}
# Check crs
st_crs(hunan)
```

```{r}
# Check crs
glimpse(hunan)
```

# Hunan 2012

```{r}
# Load csv file
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
# Check file
glimpse(hunan2012)
```
:::

### Merging both datasets

Both datasets have the common field "County"

```{r}
# Merge both datasets
hunan_GDPPC <- left_join(hunan, hunan2012, by = "County") %>%
  # select(1:4, 7, 15)
  select(`NAME_2`, `ID_3`, `NAME_3`, `ENGTYPE_3`, `County`, `GDPPC`, `geometry`) # Using Column names for readability
# See result
glimpse(hunan_GDPPC)
```
```{r}
# tm_shape(hunan_GDPPC)
```

# Global Measures of Spatial Association

## Derive Queen's contiguity weigths

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),       # Neighbour list object
         wt = st_weights(nb, style = "W"),   
         .before = 1)
```

```{r}

# Dont do this in practise (no significant value)
moranI <- global_moran(wm_q$GDPPC,
                       wm_q$nb,
                       wm_q$wt)

moranI
```

```{r}
# This has a test.
global_moran_test(wm_q$GDPPC,
                  wm_q$nb,
                  wm_q$wt)
```



```{r}
# Ensure reproducibility
set.seed(42)

# Permutation test
global_moran_perm(wm_q$GDPPC,
                  wm_q$nb,
                  wm_q$wt,
                  nsim = 99)

```

# Local Measure

## Local Moran's I
```{r}
lisa <- wm_q %>%
  mutate(local_moran = local_moran(GDPPC, nb, wt, nsim = 99),
    .before = 1) %>%
  unnest(local_moran)

# eii - expected 
# var_ii - variance
# z_ii - z score
# p_ii - p value
# p_ii_sim - p value from simulation
# p_folded_sim - k fold validation


# mean - if data follows normal distribution
# median - if data is skewed
```

#### Visualize local Moran's I

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("ii") +
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6, 8)) + 
  tm_layout(
    main.title = "local Moran's I of GDPPC",
    main.title.size = 0.8
    )
```
### Visualize p-value of local Moran's I

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("p_ii_sim") +
  tm_borders(alpha = 0.5) +
  tm_layout(
    main.title = "p-value of local Moran's I",
    main.title.size = 0.8
    )
```


### Visualize them together

```{r}
tmap_mode("plot")
map1 <- tm_shape(lisa) +
  tm_fill("ii") +
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6, 8)) + 
  tm_layout(
    main.title = "local Moran's I of GDPPC",
    main.title.size = 0.8
    )

map2 <- tm_shape(lisa) +
  tm_fill("p_ii_sim") +
  tm_borders(alpha = 0.5) +
  tm_layout(
    main.title = "p-value of local Moran's I",
    main.title.size = 0.8
    )

tmap_arrange(map1, map2, ncol = 2)
```


## LISA Map


```{r}

lisa_sig <- lisa %>%
  filter(p_ii < 0.05)
tmap_mode("plot")


tm_shape(lisa) + 
  tm_polygons() +
  tm_borders(alpha = 0.5) + 
tm_shape(lisa_sig) + 
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```

## Compute local Gi* Statistics

```{r}
wm_idw <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```
```{r}
# Compute local Gi
HCSA <- wm_idw %>%
  mutate(local_Gi = local_gstar_perm(GDPPC, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

HCSA
```


### Visualize gi*

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("gi_star") +
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6, 8))
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("p_sim") +
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6, 8))
```


```{r}
HCSA_sig <- HCSA %>%
  filter(p_sim < 0.05)
tmap_mode("plot")
tm_shape(HCSA) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig) +
  tm_fill("cluster") +
  tm_borders(alpha = 0.4)
```

