---
title: "Take Home Exercise 02"
author: "Henry Low"
date: "Sep 25 2024"
date-modified: "last-modified"
execute:
  evalu: true
  echo: true
  message: false
  freeze: true
format: html
editor: visual
date-format: "DD MM YYYY"
---

# Background

Tourism has been a key driver of Thailand's gross domestic product (GDP), accounting for up to 20% of it. The COVID-19 pandemic caused the tourism revenue (from domestic and international tourism) to crash to US\$24 billion in 2020, from US\$90 billion in 2019.

# Objectives

Using appropriate global and local spatial autocorrelation analysis and emerging hotspot analysis, I would like to find out:\
- If the key indicators of tourism economy of Thailand are independent from space and space and time.\
- If the tourism economy is indeed spatial and spatio-temporal dependent.\
- If so, detect where the clusters and outliers are, and the emerging hotpot and cold spot areas.

# Study Area

The study area will be Thailand (sf_polygon features) at [province](https://en.wikipedia.org/wiki/Provinces_of_Thailand) level.

# Data Sources

*(saved under 'data' folder)*\
[Thailand Domestic Tourism Statistics 2019-2023](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) from Kaggle\
[Thailand - Subnational Administrative Boundaries from HDX](https://data.humdata.org/dataset/cod-ab-tha?)...[Click here to download here](https://data.humdata.org/dataset/d24bdc45-eb4c-4e3d-8b16-44db02667c27/resource/d0c722ff-6939-4423-ac0d-6501830b1759/download/tha_adm_rtsd_itos_20210121_shp.zip)

# 1 Setting Up

## 1.1 Loading R Packages

I will be using the following R packages:\
-`sf` package to perform geospatial wrangling tasks \
- `sfdep` package to perform spatial autocorrelation analysis and emerging hotspot analysis \
- `tidyverse` package for reading csv files, dataframe processing tasks \
- `tmap` package for plotting tasks \

```{r}
pacman::p_load(tidyverse, sfdep, sf, tmap)
```

## 1.2 Loading Datasets

### 1.2.1 Thailand Subnational Adminstrative Boundaries

```{r}
# Load Thailand Province from HDX
th_bound_l1 <- st_read(dsn = "data/tha_adm_rtsd_itos_20210121_shp/", layer = "tha_admbnda_adm1_rtsd_20220121") %>%
  st_transform(crs = 32647) 

# Check output
glimpse(th_bound_l1)
```

### 1.2.2 Thailand Tourism Data

```{r}
tbl_tourism <- read_csv('data/archive/thailand_domestic_tourism_2019_2023_ver2.csv')

glimpse(tbl_tourism)
```

Before joining the 2 datasets, we need to check if there are any non-matching values in either.

```{r}
# Find values in Th bound that are not in Tourism Data
only_in_th_bound_l1 <- anti_join(th_bound_l1, tbl_tourism, by = c("ADM1_EN" = "province_eng")) %>% pull(ADM1_EN)

# Find values in Tourism Data that are not in Th Bound
only_in_tbl_tourism <- anti_join(tbl_tourism, th_bound_l1, by = c("province_eng" = "ADM1_EN")) %>% pull(province_eng)

# See all values
unmatched_values <- union(only_in_th_bound_l1, only_in_tbl_tourism)
print(unmatched_values)
```

Since we found the discrepancies, minor re-coding is required to ensure that values are aligned. The KPIs are also pivoted from long to wide to facilitate future analysis.

```{r}
# Data processing
tbl_tourism_wide <- tbl_tourism %>%
  mutate(province_eng = recode(province_eng,
                       "Lopburi" = "Lop Buri",
                       "Chainat" = "Chai Nat",
                       "Chonburi" = "Chon Buri",
                       "Prachinburi" = "Prachin Buri",
                       "Phang Nga" = "Phangnga",
                       "Buriram" = "Buri Ram",
                       "Sisaket" = "Si Sa Ket",
                       "Nong Bua Lamphu" = "Nong Bua Lam Phu"
                       ),
         province_eng = trimws(province_eng)
         ) %>%
  pivot_wider(., names_from = "variable", values_from = "value")

# Check output
summary(tbl_tourism_wide)
```

There's some weird values in revenue_foreign (negative), more investigation is required. Furthermore, it was picked up for some rows no_tourist_stay is greater than no_tourist_all, which should not be possible.

```{r}
tbl_tourism_wide %>%
  filter(revenue_foreign < 0 | no_tourist_stay > no_tourist_all)
```

Since this anomaly only pertains to a few rows of data, I'll assume data entry error and re-code those revenue_foreign anomalies to 0 and cap the no_tourist_stay to no_tourist_all.

```{r}
tbl_tourism_wide <- tbl_tourism_wide %>%
  mutate(revenue_foreign = if_else(revenue_foreign < 0, 0, revenue_foreign),
         no_tourist_stay = if_else(no_tourist_stay > no_tourist_all, no_tourist_all, no_tourist_stay))

# Check output
summary(tbl_tourism_wide)
```

To facilitate spatial autocorrelation across space and space and time, I need the tourism data in different formats. While doing so, additional KPIs will also be calculated.

::: panel-tabset
# Overall

```{r}
# Summarize across all years
tbl_tourism_sum_all <- tbl_tourism_wide %>%
  group_by(province_eng, province_thai, region_thai, region_eng) %>%
  summarize(
    ratio_tourist_stay = mean(ratio_tourist_stay, na.rm = TRUE),
    no_tourist_stay = sum(no_tourist_stay, na.rm = TRUE),
    no_tourist_all = sum(no_tourist_all, na.rm = TRUE),
    no_tourist_thai = sum(no_tourist_thai, na.rm = TRUE),
    no_tourist_foreign = sum(no_tourist_foreign, na.rm = TRUE),
    revenue_all = sum(revenue_all, na.rm = TRUE),
    revenue_thai = sum(revenue_thai, na.rm = TRUE),
    revenue_foreign = sum(revenue_foreign, na.rm = TRUE)
  ) %>%
  ungroup()
```

```{r}
# Compute additional KPIs
tbl_tourism_sum_all <- tbl_tourism_sum_all %>%
  mutate(revenue_tourist_all = revenue_all/no_tourist_all,
         revenue_tourist_thai = revenue_thai/no_tourist_thai,
         revenue_tourist_foreign = revenue_foreign/no_tourist_foreign,
         revenue_tourist_stay = revenue_all/no_tourist_stay,
         tourist_stay_all = no_tourist_stay/no_tourist_all)

# Check output
summary(tbl_tourism_sum_all)
```

# By Year

```{r}
# Summarize across all years
tbl_tourism_sum_year <- tbl_tourism_wide %>%
  mutate(year = year(date)) %>%
  group_by(year, province_eng, province_thai, region_thai, region_eng) %>%
  summarize(
    ratio_tourist_stay = mean(ratio_tourist_stay, na.rm = TRUE),
    no_tourist_stay = sum(no_tourist_stay, na.rm = TRUE),
    no_tourist_all = sum(no_tourist_all, na.rm = TRUE),
    no_tourist_thai = sum(no_tourist_thai, na.rm = TRUE),
    no_tourist_foreign = sum(no_tourist_foreign, na.rm = TRUE),
    revenue_all = sum(revenue_all, na.rm = TRUE),
    revenue_thai = sum(revenue_thai, na.rm = TRUE),
    revenue_foreign = sum(revenue_foreign, na.rm = TRUE)
  ) %>%
  ungroup()
```

```{r}
# Compute additional KPIs
tbl_tourism_sum_year <- tbl_tourism_sum_year %>%
  mutate(revenue_tourist_all = revenue_all/no_tourist_all,
         revenue_tourist_thai = revenue_thai/no_tourist_thai,
         revenue_tourist_foreign = revenue_foreign/no_tourist_foreign,
         revenue_tourist_stay = revenue_all/no_tourist_stay,
         tourist_stay_all = no_tourist_stay/no_tourist_all)

# Check output
summary(tbl_tourism_sum_year)
```

# By Year & Month

```{r}
# No additional processing required
# Compute additional KPIs
tbl_tourism_wide <- tbl_tourism_wide %>%
  mutate(revenue_tourist_all = ifelse(no_tourist_all == 0, 0, revenue_all/no_tourist_all),
         revenue_tourist_thai = ifelse(no_tourist_thai == 0, 0, revenue_thai/no_tourist_thai),
         revenue_tourist_foreign = ifelse(no_tourist_foreign == 0, 0, revenue_foreign/no_tourist_foreign),
         revenue_tourist_stay = ifelse(no_tourist_stay == 0, 0, revenue_all/no_tourist_stay),
         tourist_stay_all = ifelse(no_tourist_all == 0, 0, no_tourist_stay/no_tourist_all))

# Check output
summary(tbl_tourism_wide)
```
:::

### 1.2.3 Merge Tourism data

Finally, I can merge the tourism dataset to the spatial dataset.

```{r}
# Join with tourism data all
th_bound_tour_all <- left_join(th_bound_l1, tbl_tourism_sum_all, by = c("ADM1_EN" = "province_eng")) 

# Join with tourism data by year
th_bound_tour_year <- left_join(th_bound_l1, tbl_tourism_sum_year, by = c("ADM1_EN" = "province_eng")) 


# Join with tourism data by year and month
th_bound_tour_year_month <- left_join(th_bound_l1, tbl_tourism_wide, by = c("ADM1_EN" = "province_eng")) 
```

A good practise is to save these processed dataset for easy retrieval.

```{r}
# Export to processed sub-folder as RDS
write_rds(th_bound_tour_all, 'data/processed/th_bound_tour_all.rds')

write_rds(th_bound_tour_year, 'data/processed/th_bound_tour_year.rds')

write_rds(th_bound_tour_year_month, 'data/processed/th_bound_tour_year_month.rds')
```

# 2 Exploratory Data Analysis

After clearing the r environment, I'll load in the various datasets.

```{r}
# Clear R console
rm(list = ls(all.names = TRUE))

# Load various processed dataset
th_bound_tour_all <- read_rds('data/processed/th_bound_tour_all.rds')
th_bound_tour_year <- read_rds('data/processed/th_bound_tour_year.rds')
th_bound_tour_year_month <- read_rds('data/processed/th_bound_tour_year_month.rds')
```

```{r, fig.width=12, fig.height=12}
tmap_mode("plot")
tm_shape(th_bound_tour_all) +
  tm_fill("revenue_all", 
          style = "quantile", 
          palette = "Blues",
          title = "revenue_all") +
  tm_layout(main.title = "Distribution of Tourism Revenue by Province",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2)
```

# 3 Spatial Analysis of Thailand Tourism Key Indicators

Lets first set the seed to ensure reproducibility of all subsequent analysis.

```{r}
set.seed(42)
```

In order to perform any spatial correlation analysis, spatial weights have to be generated first. There are a few options:

| Method                       | Details                                                                      |
|------------------------|-----------------------------------------------|
| `st_contiguity` (i.e. Queen) | Based on regions with contiguous boundaries (uses `spdep::poly2nb`)          |
| `st_dist_band`               | Based on distance band (uses `spdep::dnearneigh`)                            |
| `st_knn`                     | Based on k nearest neighbours (uses `spdep::knearneigh` and `spdep::knn2nb`) |

Before passing the coordinates to either functions, checks are required to ensure that the points are in the interior of each province (i.e. not in the middle of the ocean)

```{r}
# Generate coordinates using st_centroid
longitude_cent <- map_dbl(th_bound_tour_all$geometry, ~st_centroid(.x)[[1]])
latitude_cent <- map_dbl(th_bound_tour_all$geometry, ~st_centroid(.x)[[2]])
coords_cent <- cbind(longitude_cent, latitude_cent)

# Generate coordinates using st_point_on_surface
longitude <- map_dbl(th_bound_tour_all$geometry, ~st_point_on_surface(.x)[[1]])
latitude <- map_dbl(th_bound_tour_all$geometry, ~st_point_on_surface(.x)[[2]])
coords <- cbind(longitude, latitude)
```

```{r, fig.width=30, fig.height=20}
# Visualise both points on a map to verify
plot(th_bound_tour_all$geometry, border="lightgrey")
points(coords_cent, pch = 19, cex = 0.6, col = "red")
points(coords, pch = 19, cex = 0.6, col = "blue")
```

After closely viewing the plot, all points from `st_centroid` are within the interior of the province polygons. With the exception of a few provinces, the points from `st_centroid` are seemingly better placed towards the center as compared to `st_point_on_surface`. Therefore, this allows the sfdep distance based neighbour functions to be used with ease considering st_centroid is used as the default.

:::panel-tabset

# st_contiguity

```{r}
# Calculate neighbours
nb_contiguity <- st_contiguity(th_bound_tour_all$geometry)

# Check output
nb_contiguity
```



```{r, fig.width=12, fig.height=8}
# Visualize neighbours
plot(th_bound_tour_all$geometry, border="lightgrey", , main="Queen Contiguity ")
plot(nb_contiguity, coords_cent, pch = 19, cex = 0.6, add = TRUE, col = "red")
```


# st_dist_band

```{r}
# Calculate neighbours
nb_dist <- st_dist_band(th_bound_tour_all$geometry)

# Check output
nb_dist
```
```{r, fig.width=12, fig.height=8}
# Visualize neighbours
plot(th_bound_tour_all$geometry, border="lightgrey", main="Distance Band")
plot(nb_dist, coords_cent, pch = 19, cex = 0.6, add = TRUE, col = "red")
```


# st_knn

General rule of thumb for k is square root of observations. 
$$
k \approx \sqrt{76} \approx 8
$$
Just for variety, k = 5 (average number from `st_contiguity`) is also run.

```{r}
# Calculate neighbours
nb_knn_8 <- st_knn(th_bound_tour_all$geometry, k = 8)
nb_knn_5 <- st_knn(th_bound_tour_all$geometry, k = 5)

# Check output
nb_knn_8
nb_knn_5
```
```{r, fig.width=12, fig.height=8}
# Visualize neighbours
par(mfrow=c(1,2))
plot(th_bound_tour_all$geometry, border="lightgrey", main="K = 8")
plot(nb_knn_8, coords_cent, pch = 19, cex = 0.6, add = TRUE, col = "red")
plot(th_bound_tour_all$geometry, border="lightgrey", main="K = 5")
plot(nb_knn_5, coords_cent, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

:::

Comparing the various neighbour methods, 



## 3.1 Global Spatial Autocorrelation

```{r}
th_tour_knn5_all <- th_bound_tour_all %>%
  mutate(nb = nb_knn_5,
         wt = st_weights(nb, style = "W"),
         wt_inv = st_inverse_distance(nb, geometry = geometry, scale = 100, alpha = 1),
         .before = 1)
```

::: panel-tabset
# Revenue

```{r}
moranI_rev <- global_moran(th_tour_knn5_all$tourist_stay_all,
                       th_tour_knn5_all$nb,
                       th_tour_knn5_all$wt)
glimpse(moranI_rev)
```

```{r}
global_moran_test(th_tour_knn5_all$tourist_stay_all,
                       th_tour_knn5_all$nb,
                       th_tour_knn5_all$wt)
```

```{r}
global_moran_perm(th_tour_knn5_all$tourist_stay_all,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```
:::

## 3.2 Local Spatial Autocorrelation

# 4 Spatial-Temporal Analysis of Thailand Tourism Key Indicators

## 3.1 Global Spatial
