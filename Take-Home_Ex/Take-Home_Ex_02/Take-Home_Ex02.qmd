---
title: "Take Home Exercise 02"
author: "Henry Low"
date: "Sep 25 2024"
date-modified: "last-modified"
execute:
  evalu: true
  context: shared
  echo: true
  message: false
  freeze: true
format: html
editor: visual
date-format: "DD MM YYYY"
---

# Background

Tourism has been a key driver of Thailand's gross domestic product (GDP), accounting for up to 20% of it. The COVID-19 pandemic caused the tourism revenue (from domestic and international tourism) to crash to US\$24 billion in 2020, from US\$90 billion in 2019.

# Objectives

Using appropriate global and local spatial autocorrelation analysis and emerging hotspot analysis, I would like to find out:\
- If the key indicators of tourism economy of Thailand are independent from space and space and time.\
- If the tourism economy is indeed spatial and spatio-temporal dependent.\
- If so, detect where the clusters and outliers are, and the emerging hotpot and cold spot areas.

# Study Area

The study area will be Thailand (sf_polygon features) at [province](https://en.wikipedia.org/wiki/Provinces_of_Thailand) level.

# Data Sources

*(saved under 'data' folder)*\
[Thailand Domestic Tourism Statistics 2019-2023](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) from Kaggle\
[Thailand - Subnational Administrative Boundaries from HDX](https://data.humdata.org/dataset/cod-ab-tha?)...[Click here to download here](https://data.humdata.org/dataset/d24bdc45-eb4c-4e3d-8b16-44db02667c27/resource/d0c722ff-6939-4423-ac0d-6501830b1759/download/tha_adm_rtsd_itos_20210121_shp.zip)

# 1 Setting Up

## 1.1 Loading R Packages

I will be using the following R packages:\
-`sf` package to perform geospatial wrangling tasks \
- `sfdep` package to perform spatial autocorrelation analysis and emerging hotspot analysis \
- `tidyverse` package for reading csv files, dataframe processing tasks \
- `ggplot2` and `ggpubr` package for plotting statistical graphics \
- `DT`, `crosstalk` and `htmltools`, package for visualizing results in a table format \
- `Kendall` package for performing and visualizing Mann-Kendall Test \
- `tmap` package for plotting tasks \

```{r}
pacman::p_load(tidyverse, sfdep, sf, ggplot2, ggpubr, tmap, DT, crosstalk, htmltools, Kendall)
```

## 1.2 Loading Datasets

The aim here is to load the datasets and do the necessary geospatial data wrangling before proceeding to the subsequent steps.

### 1.2.1 Thailand Subnational Adminstrative Boundaries

`st_read` from the sf package is used to load the subnational boundaries.

```{r}
# Load Thailand Province from HDX
th_bound_l1 <- st_read(dsn = "data/tha_adm_rtsd_itos_20210121_shp/", layer = "tha_admbnda_adm1_rtsd_20220121") %>%
  st_transform(crs = 32647) 

# Check output
glimpse(th_bound_l1)
```

### 1.2.2 Thailand Tourism Data

`read_csv` from readr package within tidyverse is used to load the aspatial data as a tibble.

```{r}
tbl_tourism <- read_csv('data/archive/thailand_domestic_tourism_2019_2023_ver2.csv')

glimpse(tbl_tourism)
```

Before joining the 2 datasets, we need to check if there are any non-matching values in either joining columns.

```{r}
# Find values in Th bound that are not in Tourism Data
only_in_th_bound_l1 <- anti_join(th_bound_l1, tbl_tourism, by = c("ADM1_EN" = "province_eng")) %>% pull(ADM1_EN)

# Find values in Tourism Data that are not in Th Bound
only_in_tbl_tourism <- anti_join(tbl_tourism, th_bound_l1, by = c("province_eng" = "ADM1_EN")) %>% pull(province_eng)

# See all values
unmatched_values <- union(only_in_th_bound_l1, only_in_tbl_tourism)
print(unmatched_values)
```

Since we found the discrepancies, minor re-coding is required to ensure that values are aligned. The KPIs are also pivoted from long to wide to facilitate future analysis.

```{r}
# Data processing
tbl_tourism_wide <- tbl_tourism %>%
  mutate(province_eng = recode(province_eng,
                       "Lopburi" = "Lop Buri",
                       "Chainat" = "Chai Nat",
                       "Chonburi" = "Chon Buri",
                       "Prachinburi" = "Prachin Buri",
                       "Phang Nga" = "Phangnga",
                       "Buriram" = "Buri Ram",
                       "Sisaket" = "Si Sa Ket",
                       "Nong Bua Lamphu" = "Nong Bua Lam Phu"
                       ),
         province_eng = trimws(province_eng)
         ) %>%
  pivot_wider(., names_from = "variable", values_from = "value")

# Check output
summary(tbl_tourism_wide)
```

There are some weird values in revenue_foreign (negative), more investigation is required. Furthermore, it was picked up for some rows no_tourist_stay is greater than no_tourist_all, which should not be possible.

```{r}
tbl_tourism_wide %>%
  filter(revenue_foreign < 0 | no_tourist_stay > no_tourist_all)
```

Since this anomaly only pertains to a few rows of data, I'll assume data entry error and re-code those revenue_foreign anomalies to 0 and cap the no_tourist_stay to no_tourist_all.

```{r}
tbl_tourism_wide <- tbl_tourism_wide %>%
  mutate(revenue_foreign = if_else(revenue_foreign < 0, 0, revenue_foreign),
         no_tourist_stay = if_else(no_tourist_stay > no_tourist_all, no_tourist_all, no_tourist_stay))

# Check output
summary(tbl_tourism_wide)
```

To facilitate spatial autocorrelation across space and space and time, I need the tourism data in different formats. While doing so, additional KPIs will also be calculated. Rationale for those will be further explained while exploring the data.

::: panel-tabset
# Overall

```{r}
# Summarize across all years
tbl_tourism_sum_all <- tbl_tourism_wide %>%
  group_by(province_eng, province_thai, region_thai, region_eng) %>%
  summarize(
    ratio_tourist_stay = mean(ratio_tourist_stay, na.rm = TRUE),
    no_tourist_stay = sum(no_tourist_stay, na.rm = TRUE),
    no_tourist_all = sum(no_tourist_all, na.rm = TRUE),
    no_tourist_thai = sum(no_tourist_thai, na.rm = TRUE),
    no_tourist_foreign = sum(no_tourist_foreign, na.rm = TRUE),
    revenue_all = sum(revenue_all, na.rm = TRUE),
    revenue_thai = sum(revenue_thai, na.rm = TRUE),
    revenue_foreign = sum(revenue_foreign, na.rm = TRUE)
  ) %>%
  ungroup()
```

```{r}
# Compute additional KPIs
tbl_tourism_sum_all <- tbl_tourism_sum_all %>%
  mutate(tourist_thai_prop = ifelse(no_tourist_all == 0, 0, no_tourist_thai/no_tourist_all),
         tourist_foreign_prop = ifelse(no_tourist_all == 0, 0, no_tourist_foreign/no_tourist_all),
         revenue_thai_prop = ifelse(revenue_all == 0, 0, revenue_thai/revenue_all),
         revenue_foreign_prop = ifelse(revenue_all == 0, 0, revenue_foreign/revenue_all),
         revenue_tourist_all = ifelse(no_tourist_all == 0, 0, revenue_all/no_tourist_all),
         revenue_tourist_thai = ifelse(no_tourist_thai == 0, 0, revenue_thai/no_tourist_thai),
         revenue_tourist_foreign = ifelse(no_tourist_foreign == 0, 0, revenue_foreign/no_tourist_foreign),
         revenue_tourist_stay = ifelse(no_tourist_stay == 0, 0, revenue_all/no_tourist_stay),
         tourist_stay_all = ifelse(no_tourist_all == 0, 0, no_tourist_stay/no_tourist_all))

# Check output
summary(tbl_tourism_sum_all)
```

# By Year

```{r}
# Summarize across all years
tbl_tourism_sum_year <- tbl_tourism_wide %>%
  mutate(year = year(date)) %>%
  group_by(year, province_eng, province_thai, region_thai, region_eng) %>%
  summarize(
    ratio_tourist_stay = mean(ratio_tourist_stay, na.rm = TRUE),
    no_tourist_stay = sum(no_tourist_stay, na.rm = TRUE),
    no_tourist_all = sum(no_tourist_all, na.rm = TRUE),
    no_tourist_thai = sum(no_tourist_thai, na.rm = TRUE),
    no_tourist_foreign = sum(no_tourist_foreign, na.rm = TRUE),
    revenue_all = sum(revenue_all, na.rm = TRUE),
    revenue_thai = sum(revenue_thai, na.rm = TRUE),
    revenue_foreign = sum(revenue_foreign, na.rm = TRUE)
  ) %>%
  ungroup()
```

```{r}
# Compute additional KPIs
tbl_tourism_sum_year <- tbl_tourism_sum_year %>%
  mutate(tourist_thai_prop = ifelse(no_tourist_all == 0, 0, no_tourist_thai/no_tourist_all),
         tourist_foreign_prop = ifelse(no_tourist_all == 0, 0, no_tourist_foreign/no_tourist_all),
         revenue_thai_prop = ifelse(revenue_all == 0, 0, revenue_thai/revenue_all),
         revenue_foreign_prop = ifelse(revenue_all == 0, 0, revenue_foreign/revenue_all),
         revenue_tourist_all = ifelse(no_tourist_all == 0, 0, revenue_all/no_tourist_all),
         revenue_tourist_thai = ifelse(no_tourist_thai == 0, 0, revenue_thai/no_tourist_thai),
         revenue_tourist_foreign = ifelse(no_tourist_foreign == 0, 0, revenue_foreign/no_tourist_foreign),
         revenue_tourist_stay = ifelse(no_tourist_stay == 0, 0, revenue_all/no_tourist_stay),
         tourist_stay_all = ifelse(no_tourist_all == 0, 0, no_tourist_stay/no_tourist_all))

# Check output
summary(tbl_tourism_sum_year)
```

# By Year & Month

```{r}
# No additional processing required
# Compute additional KPIs
tbl_tourism_wide <- tbl_tourism_wide %>%
  mutate(tourist_thai_prop = ifelse(no_tourist_all == 0, 0, no_tourist_thai/no_tourist_all),
         tourist_foreign_prop = ifelse(no_tourist_all == 0, 0, no_tourist_foreign/no_tourist_all),
         revenue_thai_prop = ifelse(revenue_all == 0, 0, revenue_thai/revenue_all),
         revenue_foreign_prop = ifelse(revenue_all == 0, 0, revenue_foreign/revenue_all),
         revenue_tourist_all = ifelse(no_tourist_all == 0, 0, revenue_all/no_tourist_all),
         revenue_tourist_thai = ifelse(no_tourist_thai == 0, 0, revenue_thai/no_tourist_thai),
         revenue_tourist_foreign = ifelse(no_tourist_foreign == 0, 0, revenue_foreign/no_tourist_foreign),
         revenue_tourist_stay = ifelse(no_tourist_stay == 0, 0, revenue_all/no_tourist_stay),
         tourist_stay_all = ifelse(no_tourist_all == 0, 0, no_tourist_stay/no_tourist_all))

# Check output
summary(tbl_tourism_wide)
```

```{r}
# Save processed tbl_tourism_wide
write_rds(tbl_tourism_wide, 'data/processed/tbl_tourism_wide.rds')
```
:::

### 1.2.3 Merge Tourism data

Finally, I can merge the tourism dataset to the spatial dataset using `left_join` from dplyr. These are sorted to facilitate filtering later.

```{r}
# Join with tourism data all
th_bound_tour_all <- left_join(th_bound_l1, tbl_tourism_sum_all, by = c("ADM1_EN" = "province_eng")) %>%
  arrange(ADM1_EN)

# Join with tourism data by year
th_bound_tour_year <- left_join(th_bound_l1, tbl_tourism_sum_year, by = c("ADM1_EN" = "province_eng")) %>%
  arrange(year, ADM1_EN)


# Join with tourism data by year and month
th_bound_tour_year_month <- left_join(th_bound_l1, tbl_tourism_wide, by = c("ADM1_EN" = "province_eng")) %>%
  arrange(date.y, ADM1_EN)
```

A good practise is to save these processed datasets for easy retrieval.

```{r}
# Export to processed sub-folder as RDS
write_rds(th_bound_tour_all, 'data/processed/th_bound_tour_all.rds')

write_rds(th_bound_tour_year, 'data/processed/th_bound_tour_year.rds')

write_rds(th_bound_tour_year_month, 'data/processed/th_bound_tour_year_month.rds')
```

After clearing the r environment, I'll load in the various datasets.

```{r}
# Clear R console
rm(list = ls(all.names = TRUE))

# Load various processed dataset
th_bound_tour_all <- read_rds('data/processed/th_bound_tour_all.rds')
th_bound_tour_year <- read_rds('data/processed/th_bound_tour_year.rds')
th_bound_tour_year_month <- read_rds('data/processed/th_bound_tour_year_month.rds')
```

# 2 Exploratory Data Analysis

In this section, I will explore the various tourism indicators provided by the dataset.

| Variable           | Definition                                                        |
|-------------------------|-----------------------------------------------|
| revenue_all        | Revenue generated by all tourists in the province (Thai Baht)     |
| revenue_thai       | Revenue generated by Thai tourists in the province (Thai Baht)    |
| revenue_foreign    | Revenue generated by Foreign tourists in the province (Thai Baht) |
| no_tourist_all     | Total number of tourists who visited the province                 |
| no_tourist_thai    | Number of Thai tourists who visited the province                  |
| no_tourist_foreign | Number of Foreign tourists who visited the province               |
| ratio_tourist_stay | Occupancy rate - Percentage of occupied travel accomodation       |
| no_tourist_stay    | Number of Tourists who stayed overnight in the province           |

Lets first check the revenue indicators.

```{r}
# Visualize for revenue
revenue_all <- ggplot(data=th_bound_tour_all, 
                      aes(x=`revenue_all`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") + 
  labs(x = "Revenue from all tourists")

revenue_thai <- ggplot(data=th_bound_tour_all, 
                      aes(x=`revenue_thai`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") + 
  labs(x = "Revenue from Thai tourists")

revenue_foreign <- ggplot(data=th_bound_tour_all, 
                      aes(x=`revenue_foreign`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") + 
  labs(x = "Revenue from Foreign tourists")

ggarrange(revenue_all, revenue_thai, revenue_foreign, ncol = 3)
```

As expected, there is a large left skew, with majority of provinces generating much lesser revenue as compared to the outliers. Lets look at the tourist count then.

```{r}
# Visualize for tourist
map1 <- ggplot(data=th_bound_tour_all, 
                      aes(x=`no_tourist_all`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") + 
  labs(x = "Total Number of tourists")

map2 <- ggplot(data=th_bound_tour_all, 
                      aes(x=`no_tourist_thai`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") + 
  labs(x = "Number of Thai tourists")

map3 <- ggplot(data=th_bound_tour_all, 
                      aes(x=`no_tourist_foreign`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") + 
  labs(x = "Number of Foreign tourists")

ggarrange(map1, map2, map3, ncol = 3)
```

Again, we see the same distribution for tourist count as compared to revenue. This is can be clearly illustrated when we plot both revenue and tourists as choropleth maps.

```{r, fig.width=12, fig.height=8}
map1 <- tm_shape(th_bound_tour_all) + 
  tm_fill(col = "no_tourist_all",
          n = 5,
          style = "jenks", 
          title = "Total Tourist") + 
  tm_borders(alpha = 0.5) 

map2 <- tm_shape(th_bound_tour_all) + 
  tm_fill(col = "revenue_all",
          n = 5,
          style = "jenks",
          title = "Total Revenue") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(map1, map2,
             asp=NA, ncol=2)
```

It is clear that provinces with larger volume of tourists will generate larger revenue. However, that is not necessarily a good indicator of the tourism economy. Other than just trying to increase revenue by increasing the tourist traffic, the Thai government will also be keen into other indicators.

## 2.1 Feature Engineering

Other variables are created in order to provide greater depth to analysing the Thai tourism economy.

| Variable                | Definition                                          |
|-------------------------|-----------------------------------------------|
| tourist_thai_prop       | Proportion of tourists who are Thai                 |
| tourist_foreign_prop    | Proportion of tourists who are Foreign              |
| revenue_thai_prop       | Proportion of revenue generated by Thai tourists    |
| revenue_foreign_prop    | Proportion of revenue generated by Foreign tourists |
| revenue_tourist_all     | Revenue generated per tourist                       |
| revenue_tourist_thai    | Revenue generated per Thai tourist                  |
| revenue_tourist_foreign | Revenue generated per Foreign tourist               |
| revenue_tourist_stay    | Revenue generated per tourist who stay overnight    |
| tourist_stay_all        | Proportion of tourists who stayed overnight         |

Here's a quick check for 1 of the

```{r, fig.width=12, fig.height=8}
# Visualize revenue per tourist
tm_shape(th_bound_tour_all) + 
  tm_fill(col = "revenue_tourist_all",
          n = 5,
          style = "jenks", 
          title = "Revenue per Tourist") + 
  tm_borders(alpha = 0.5) 
```

This clearly shows a different distribution compared to the basic revenue/tourist count distribution. This indicator is also important the Thai government can try to increase total tourism revenue by increasing per Thai Baht spent by each tourist.

## 2.2 Power BI Visualization

Press play to see how the values change across time!

::: {style="position: relative; width: 100%; height: 0; padding-bottom: 56.25%;"}
<iframe title="Geospatial TakeHome Ex01" src="https://app.powerbi.com/view?r=eyJrIjoiYzQ3MTQzY2ItNjMyZi00ZWIwLTliYTUtOGQwM2JhNWM3OTVhIiwidCI6ImRmNGU4MzA3LWRjNjQtNDcyYS1iNGI1LWE2ZGQ2YmExMTU2NiIsImMiOjEwfQ%3D%3D" frameborder="0" allowFullScreen="true" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;">

</iframe>
:::

Althought Bangkok accounts for the overwhelming proportion of revenue and tourist count, other provinces can also be viewed to be important to Thailand's tourism economy. Some provinces are largely skewed towards foreign tourists (i.e Bangkok Metropolitan Region, provinces surrounding Phuket such as Phang Nga and Surat Thani)

In terms of spending per tourist, less prominent provinces (i.e Songkhla) may place within the top provinces, showing the potential for larger provinces to improve their tourist offerings.

Finally, by comparing the tourist proportion (foreign vs Thai) against proportion of tourists who stay over, it can be interesting to note the different tourism dynamics for each province.

-   Phuket - revenue largely driven by foreign tourists (88%), high proportion of tourists who stay over (65%)
-   Phang Nga - province near Phuket (revenue also driven by foreign tourists 80%) but low proportion of tourists who stay over (29%), suggesting it is a stopover visit as foreign tourists center their travel plans around Phuket instead
-   Bangkok - revenue somewhat driven by Foreign tourists (60%), with only 50% of tourists who stay over, suggesting it is a place where people travel to as a quick getaway (usually a daytrip)
-   Ma Hong Son - revenue largely driven by Thai tourists (78%), high proportion of tourists who stay over (90%), suggesting that it is a place where locals go to for an extended holiday given its location (at the edges of Thailand).

# 3 Global Spatial Autocorrelation Analysis of Thailand Tourism Key Indicators

In order to determine whether tourism indicators are independent of space, and space and time, I would need to do the following:

1.  Compute Spatial Weights
    a.  Get list of neighbours
    b.  Calculate weights
2.  Perform Global Moran's I on key indicators

Geary's C will not be conducted as it heavily overlaps with Moran's I (in terms of the objective).

## 3.1 Spatial Weights Matrix

There are a few options to get the list of neighbours in `sfdep` package:

| Method                          | Details                                                                      |
|-------------------------|-----------------------------------------------|
| `st_contiguity` (i.e. Queen)    | Based on regions with contiguous boundaries (uses `spdep::poly2nb`)          |
| `st_dist_band` (fixed distance) | Based on distance band (uses `spdep::dnearneigh`)                            |
| `st_knn` (adaptive distance)    | Based on k nearest neighbours (uses `spdep::knearneigh` and `spdep::knn2nb`) |

Before passing the coordinates to either functions, checks are required to ensure that the points are in the interior of each province (i.e. not in the middle of the ocean).

```{r}
# Generate coordinates using st_centroid
longitude_cent <- map_dbl(th_bound_tour_all$geometry, ~st_centroid(.x)[[1]])
latitude_cent <- map_dbl(th_bound_tour_all$geometry, ~st_centroid(.x)[[2]])
coords_cent <- cbind(longitude_cent, latitude_cent)

# Generate coordinates using st_point_on_surface
longitude <- map_dbl(th_bound_tour_all$geometry, ~st_point_on_surface(.x)[[1]])
latitude <- map_dbl(th_bound_tour_all$geometry, ~st_point_on_surface(.x)[[2]])
coords <- cbind(longitude, latitude)
```

```{r, fig.width=12, fig.height=8}
# Visualise both points on a map to verify
plot(th_bound_tour_all$geometry, border="lightgrey", main = "Points Comparison")
points(coords_cent, pch = 19, cex = 0.2, col = "red")
points(coords, pch = 19, cex = 0.2, col = "blue")
legend("topright", legend = c("st_centroid", "st_point_on_surface-"), 
       col = c("red", "blue"), pch = 19, cex = 0.8)
```

After closely viewing the plot, all points from `st_centroid` are within the interior of the province polygons. With the exception of a few provinces, the points from `st_centroid` are seemingly better placed towards the center as compared to `st_point_on_surface`. Therefore, this allows the sfdep distance based neighbour functions to be used with ease considering st_centroid is used as the default.

::: panel-tabset
# st_contiguity

```{r}
#| eval: false # eval: false

# Calculate neighbours
nb_contiguity <- st_contiguity(th_bound_tour_all$geometry)
```

Results are saved for ease of rendering

```{r}
# # Export output object and read it in to minimize rendering time
# write_rds(nb_contiguity, 'data/output/nb_contiguity.rds') # Uncomment when running again

# Read in output object
nb_contiguity <- read_rds('data/output/nb_contiguity.rds')

# Check output
nb_contiguity
```

```{r, fig.width=12, fig.height=8}
# Visualize neighbours
plot(th_bound_tour_all$geometry, border="lightgrey", , main="Queen Contiguity ")
plot(nb_contiguity, coords_cent, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# st_dist_band

```{r}
#| eval: false # eval: false
# Calculate neighbours
nb_dist <- st_dist_band(th_bound_tour_all$geometry)
```

Results are saved for ease of rendering

```{r}
# # Export output object and read it in to minimize rendering time
# write_rds(nb_dist, 'data/output/nb_dist.rds') # Uncomment when running again

# Read in output object
nb_dist <- read_rds('data/output/nb_dist.rds')

# Check output
nb_dist
```

```{r, fig.width=12, fig.height=8}
# Visualize neighbours
plot(th_bound_tour_all$geometry, border="lightgrey", main="Distance Band")
plot(nb_dist, coords_cent, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# st_knn

General rule of thumb for k is square root of observations. $$
k \approx \sqrt{76} \approx 8
$$ Just for variety, k = 5 (average number from `st_contiguity`) is also run.

```{r}
# Calculate neighbours
nb_knn_8 <- st_knn(th_bound_tour_all$geometry, k = 8)
nb_knn_5 <- st_knn(th_bound_tour_all$geometry, k = 5)


```

Results are saved for ease of rendering

```{r}
# # # Export output object and read it in to minimize rendering time
# write_rds(nb_knn_8, 'data/output/nb_knn_8.rds') # Uncomment when running again
# write_rds(nb_knn_5, 'data/output/nb_knn_5.rds') # Uncomment when running again

# Read in output object
nb_knn_8 <- read_rds('data/output/nb_knn_8.rds')
nb_knn_5 <- read_rds('data/output/nb_knn_5.rds')

# Check output
nb_knn_8
nb_knn_5
```

```{r, fig.width=12, fig.height=8}
# Visualize neighbours
par(mfrow=c(1,2))
plot(th_bound_tour_all$geometry, border="lightgrey", main="K = 8")
plot(nb_knn_8, coords_cent, pch = 19, cex = 0.6, add = TRUE, col = "red")
plot(th_bound_tour_all$geometry, border="lightgrey", main="K = 5")
plot(nb_knn_5, coords_cent, pch = 19, cex = 0.6, add = TRUE, col = "red")
```
:::

Comparing the various neighbour methods, I have decided on the adaptive method of determining neighbours, specifically k = 5. Reason are as follows:

-   `st_contiguity` - Not appropriate for this case since not all boundaries are contiguous, (i.e. there is an island - Phuket).
-   `st_dist_band` - Having a fixed distance causes urban provinces to have much more neighbours (i.e. Bangkok Metropolitan Region) while rural provinces have scarce neighbours. I feel that this is not an appropriate relationship for analyzing tourism indicators.
-   `st_knn` (k = 8) - Judging from the plot, the neighbour list seemed to be much to congested. k = 5 provides a more reasonable structure.

Although I have determined the neighbour list, there are also a few options to generate the weights:

| Method                | Details                                          |
|-----------------------|--------------------------------------------------|
| `st_weights`          | Standardized weights based on neighbour list     |
| `st_kernel_weights`   | Weights based on kernel functions and distance   |
| `st_inverse_distance` | Weights based on inverse distance between points |

Given the context of tourism, I have decided to focus on `st_weights`. The rationale is as follows:

-   `st_weights` - ensure that all neighbours have equal influence
-   `st_inverse_distance` - while it can be argued that distance is likely a factor especially for specific tourism indicators (i.e. local preferring areas that are closer for a quick getaway, affecting indicators involving overnight stays), it is not clear the extent to which it impacts the overall tourism industry.

While performing `st_weights`, the style is less significant due to the adaptive nature of KNN. W is selected as the default style. Rationale for not choosing the other styles are as follows:

-   B (binary weights) - Does not really matter since neighbours are already treated uniformly
-   C (globally standardized weights) - Will dilute local effects making it not suitable for tourism analysis
-   U (equal weights) - Similar to C, less focused on local effects required for tourism analysis
-   S (variance-stabilizing) - More relevant for analysis where variance stability is important
-   minmax - Similar to C and U with added layer of normalization

```{r}
th_tour_knn5_all <- th_bound_tour_all %>%
  mutate(nb = nb_knn_5,
         wt = st_weights(nb, style = "W"),
         .before = 1)
```

## 3.2 Global Moran’s I across Space

In performing Global Moran's I, `global_moran_perm` will be used over `global_moran` and `global_moran_test` as:

-   `global_moran` does not give any p-value
-   `global_moran_test` is not as robust as `global_moran_perm` which is a Monte-Carlo simulation.

The null and alternative hypothesis for Global Moran's I are:

H0: The attribute is randomly distributed among the provinces, no spatial autocorrelation

H1: The attribute is not randomly distributed among the provinces, spatial autocorrelation

::: panel-tabset
# Revenue

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$revenue_all,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$revenue_thai,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$revenue_foreign,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$revenue_thai_prop,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$revenue_foreign_prop,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

# Tourist

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$no_tourist_all,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$no_tourist_thai,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$no_tourist_foreign,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$tourist_thai_prop,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$tourist_foreign_prop,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

# Revenue/Tourist

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$revenue_tourist_all,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$revenue_tourist_thai,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$revenue_tourist_foreign,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

# Occupancy Rate

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$ratio_tourist_stay,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

# Overnight Guest

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$no_tourist_stay,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$tourist_stay_all,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```

```{r}
set.seed(42)
global_moran_perm(th_tour_knn5_all$revenue_tourist_stay,
                  th_tour_knn5_all$nb,
                  th_tour_knn5_all$wt,
                  nsim = 999)
```
:::

The p-value of Moran's I test for basic attributes are \>0.05, therefore I am not able to reject the null hypothesis for those attributes.

However, for the engineered features, the p-value is \<0.05, allowing me to reject the null hypothesis and conclude that there is sufficient evidence for the alternative hypothesis that there is spatial autocorrelation.

Therefore, with those indicators in mind I can conclude that Thailand's tourism economy is spatial dependent.

## 3.3 Global Moran's I across Space and Time

To determine whether the tourism indicators are independent of space and time, I will do the following:

1.  Set seed
2.  Filter the respective datasets by specific time (Year/Year and month)
3.  Append the neighbour list created in 3.1
4.  Calculate the spatial weight matrix
5.  Perform Global Moran's I for all KPIs
6.  Consolidate the results of the Global Moran's I

Since this is very repetitive, I'll use a function to run this iteratively.

```{r}
# Function to run global_moran_perm iteratively
run_global_moran <- function(data, date_col, value, kpi_list) {
  # Set seed
  set.seed(42)

  # Filter sf dataframe
  filtered_data <- data %>%
    filter(!!sym(date_col) == value)
  
  # Append neighbour list and calculate spatial weight matrix
  filtered_data <- filtered_data %>%
    mutate(nb = nb_knn_5,
           wt = st_weights(nb, style = "W"),
           .before = 1)
  
  # Run global_moran_perm for each KPI in kpi_weight list
  results <- lapply(kpi_list, function(kpi) {
    moran_output <- global_moran_perm(filtered_data[[kpi]],
                                      filtered_data$nb,
                                      filtered_data$wt,
                                      nsim = 999)
    data.frame(
      kpi = kpi,
      statistic = mean(moran_output$res),
      p_value = moran_output$p.value
      )
  })
  
  
  # Combine both results
  results_df <- bind_rows(results)
  
  results_df <- results_df %>%
    mutate(date = value,
           .before = 1)
  rownames(results_df) <- NULL
  return(results_df)
}
```

### 3.3.1 Across Year

On top of running the function a few additional steps are required:

1.  Define kpi list
2.  Define list of date to iterate
3.  Consolidate output

The output is also processed in a way that only replaces statistic values for those that are not significant (p_value \> 0.05), and pivot to a format for ease of visualization in a table.

```{r}
#| eval: false # eval: false

# List of KPIs
kpi_list <- c(
  "revenue_all", "revenue_thai", "revenue_foreign", "revenue_thai_prop", "revenue_foreign_prop",
  "no_tourist_all", "no_tourist_thai", "no_tourist_foreign", "tourist_thai_prop", "tourist_foreign_prop",
  "revenue_tourist_all", "revenue_tourist_thai", "revenue_tourist_foreign", 
  "ratio_tourist_stay", "no_tourist_stay", "revenue_tourist_stay", "tourist_stay_all" 
)

# List of years to iterate
year_list <- unique(th_bound_tour_year$year)

# Create output list
all_results <- list()

for (year_val in year_list) {
  # Run function for each year
  result <- run_global_moran(th_bound_tour_year, "year", year_val, kpi_list)
  
  # Append results to list
  all_results[[as.character(year_val)]] <- result
}

# Combine all output
global_moran_year <- bind_rows(all_results)

# Process output
global_moran_year <- global_moran_year %>%
  mutate(statistic = ifelse(p_value <= 0.05, round(statistic,3), "-")) %>%
  select(date, kpi, statistic) %>%
  pivot_wider(names_from = date, values_from = statistic)
```

Results are saved for ease of rendering

```{r}
# # Export output object and read it in to minimize rendering time
# write_rds(global_moran_year, 'data/output/global_moran_year.rds') # Uncomment when running the Global Moran's I again

# Read in output object
global_moran_year <- read_rds('data/output/global_moran_year.rds')
```

Now that the data is properly formatted, we can view the table with `datatable` from `DT` package.

```{r}
# datatable(global_moran_year, rownames=FALSE, extensions="Scroller", class="display", width="100%",
#             options=list(initComplete = JS(
#     "function(settings, json) {",
#     "$('body').css({'font-family': 'sans-serif'});",
#     "}"
#   ), deferRender=TRUE, scrollY=300, scroller=TRUE))

datatable(global_moran_year, rownames=FALSE, width="100%",
            options=list(pageLength = 17, initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff', 'font-family': 'sans-serif'});",
    "$(this.api().table().body()).css({'font-family': 'sans-serif'});",
    "}"
  )))
```

As expected, the basic indicators do not show any statistically significant spatial autocorrelation. Nevertheless, although the engineered indicators are generally statistically significant across the years, they are negative and very close to 0. This suggests that there is an extremely weak dispersal.

### 3.3.2 Across Year and Month

Similiar to the processes in 3.3.1, I will need to:

1.  Define list of dates to iterate
2.  Consolidate output

```{r}
#| eval: false # eval: false

# List of year and month to iterate
year_month_list <- unique(th_bound_tour_year_month$date.y)

# Create output list
all_results <- list()

for (year_month_val in year_month_list) {
  # Run function for each year
  result <- run_global_moran(th_bound_tour_year_month, "date.y", year_month_val, kpi_list)
  
  # Append results to list
  all_results[[as.character(year_month_val)]] <- result
}

# Combine all output
global_moran_year_month <- bind_rows(all_results)
```

Additional data processing steps are required to format the data appropriately.

1.  Create separate year and month columns
2.  Replaces statistic values for those that are not significant (p_value \> 0.05),
3.  Pivot to a format for ease of visualization in a table.

```{r}
#| eval: false # eval: false

# Process output
global_moran_year_month <- global_moran_year_month %>%
  mutate(date = as.Date.numeric(date),
         year = year(date),
         month = format(date,"%b"),
         statistic = ifelse(p_value <= 0.05, round(statistic,3), "-")) %>%
  select(year, kpi, statistic, month) %>%
  pivot_wider(names_from = month, values_from = statistic)
```

Results are saved for ease of rendering

```{r}
# # Export output object and read it in to minimize rendering time
# write_rds(global_moran_year_month, 'data/output/global_moran_year_month.rds') # Uncomment when running the Global Moran's I again

# Read in output object
global_moran_year_month <- read_rds('data/output/global_moran_year_month.rds')
```

`crosstalk` package is then used to provide an interactive way of filtering the table

```{r}
#| warning: false
shared <- SharedData$new(global_moran_year_month)

bscols(widths = c(12, 12),
  filter_select(
  id = "year", label = "Year", 
  sharedData = shared, ~year
  ),
  
  tags$div(style = 'width:100%; overflow-x: auto;', 
    
  datatable(shared, rownames=FALSE,
            extensions = c("FixedColumns"),
            options=list(pageLength = 17,
                         fixedColumns = list(leftColumns = 2),
                         initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff', 'font-family': 'sans-serif', 'font-size': '12px'});",
    "$(this.api().table().body()).css({'font-family': 'sans-serif', 'font-size': '12px'});",
    "}"
    ))
    )
    
    )
)
```

Comparing the output of Global Moran's I across year and across year and month, they generally point to the same insight. The impact of covid can be somewhat observed as the key indicators are less statistically significant during 2020-2021.

Therefore, I can conclude that some key indicators of Thailand tourism economy are spatial and spatio-temporal dependent.

# 4 Local Spatial Autocorrelation Analysis of Thailand Tourism Key Indicators

To identify where are clusters and outliers, `local_moran` of the `sfdep` package will be used. The indicators that will be analysed are those that have been proven to be spatially dependent. To ensure that analysis are mindfully conducted, the local spatial autocorrelation analysis will be done across space first.

Following which, carefully selected indicators will then be used with Local Moran's I across year and year and month.

Furthermore, While I can continue to do emerging hotspot analysis (EHSA) with `local_gstar_perm` from `sfdep` package for each individual time period, this will be explored in greater depth with the time dimension in a continuous fashion (as compared to the discrete way that it has been done for Global Moran's I). The rationale for this is that for EHSA aims to see how hot/cold spots change *over time*.

## 4.1 Local Moran's I across Space

The main tourism key indicators are revenue proportion (Thai vs Foreign), tourist proportion (Thai vs Foreign), Revenue/Tourist (all tourist, Thai, Foreign), and Overnight Guest (revenue/overnight guest, proportion of tourists who stayed overnight)

A similar process will be conducted iteratively for each key indicator 1. Set seed 2. Run Local Moran's I 3. Visualize Local Moran's I statistics and p-value from Step 2 4. Filter results by p-value \<= 0.05 5. Visualize LISA chart from Step 4

::: panel-tabset
# Revenue

```{r, fig.height=12, fig.width=8}
#| warning: false
# Set seed
set.seed(24)

# Thai Revenue Proportion
lisa_th <- th_tour_knn5_all %>%
  mutate(local_moran = local_moran(
    revenue_thai_prop, nb, wt, nsim = 999),
    .before = 1) %>%
  unnest(local_moran)

# Foreign Revenue Proportion
lisa_fr <- th_tour_knn5_all %>%
  mutate(local_moran = local_moran(
    revenue_foreign_prop, nb, wt, nsim = 999),
    .before = 1) %>%
  unnest(local_moran)

# Visualize statistics and p-value plots for all key indicators together 
tmap_mode("plot")
map1 <- tm_shape(lisa_th) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Thai Revenue Proportion",
            main.title.size = 0.8)

map2 <- tm_shape(lisa_th) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I (Foreign Revenue Proportion)",
            main.title.size = 0.8)

map3 <- tm_shape(lisa_fr) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Foreign Revenue Proportion",
            main.title.size = 0.8)

map4 <- tm_shape(lisa_fr) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I (Foreign Revenue Proportion)",
            main.title.size = 0.8)


tmap_arrange(map1, map2, map3, map4, ncol = 2, nrow = 2)
```

```{r, fig.height=8, fig.width=6}
#| warning: false

# Filter output for only those that are statistically significant
lisa_th_sig <- lisa_th  %>%
  filter(p_ii_sim < 0.05)
lisa_fr_sig <- lisa_fr  %>%
  filter(p_ii_sim < 0.05)

# Visualize LISA maps for both Key indicators side by side
tmap_mode("plot")
map1 <- tm_shape(lisa_th) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_th_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) + 
  tm_layout(main.title = "LISA Map of Thai Revenue Proportion",
          main.title.size = 0.8)

map2 <- tm_shape(lisa_fr) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_fr_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) + 
  tm_layout(main.title = "LISA Map of Foreign Revenue Proportion",
          main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

# Tourist

```{r, fig.height=8, fig.width=6}
#| warning: false
# Set seed
set.seed(24)

# Thai Tourist Proportion
lisa_th <- th_tour_knn5_all %>%
  mutate(local_moran = local_moran(
    tourist_thai_prop, nb, wt, nsim = 999),
    .before = 1) %>%
  unnest(local_moran)

# Foreign Tourist Proportion
lisa_fr <- th_tour_knn5_all %>%
  mutate(local_moran = local_moran(
    tourist_foreign_prop, nb, wt, nsim = 999),
    .before = 1) %>%
  unnest(local_moran)

# Visualize statistics and p-value plots for both key indicators together 
tmap_mode("plot")
map1 <- tm_shape(lisa_th) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Thai Tourist Proportion",
            main.title.size = 0.8)

map2 <- tm_shape(lisa_th) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I (Foreign Tourist Proportion)",
            main.title.size = 0.8)

map3 <- tm_shape(lisa_fr) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Foreign Tourist Proportion",
            main.title.size = 0.8)

map4 <- tm_shape(lisa_fr) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I (Foreign Tourist Proportion)",
            main.title.size = 0.8)


tmap_arrange(map1, map2, map3, map4, ncol = 2, nrow = 2)
```

```{r, fig.height=8, fig.width=6}
#| warning: false

# Filter output for only those that are statistically significant
lisa_th_sig <- lisa_th  %>%
  filter(p_ii_sim < 0.05)
lisa_fr_sig <- lisa_fr  %>%
  filter(p_ii_sim < 0.05)

# Visualize LISA maps for both Key indicators side by side
tmap_mode("plot")
map1 <- tm_shape(lisa_th) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_th_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) + 
  tm_layout(main.title = "LISA Map of Thai Tourist Proportion",
          main.title.size = 0.8)

map2 <- tm_shape(lisa_fr) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_fr_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) + 
  tm_layout(main.title = "LISA Map of Foreign Tourist Proportion",
          main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

# Revenue/Tourist

```{r, fig.height=8, fig.width=6}
#| warning: false
# Set seed
set.seed(24)

# Revenue/Tourist
lisa_all <- th_tour_knn5_all %>%
  mutate(local_moran = local_moran(
    revenue_tourist_all, nb, wt, nsim = 999),
    .before = 1) %>%
  unnest(local_moran)

# Thai Revenue/Thai Tourist
lisa_th <- th_tour_knn5_all %>%
  mutate(local_moran = local_moran(
    revenue_tourist_thai, nb, wt, nsim = 999),
    .before = 1) %>%
  unnest(local_moran)

# Foreign Revenue/Foreign Tourist
lisa_fr <- th_tour_knn5_all %>%
  mutate(local_moran = local_moran(
    revenue_tourist_foreign, nb, wt, nsim = 999),
    .before = 1) %>%
  unnest(local_moran)

# Visualize statistics and p-value plots for all key indicators together 
tmap_mode("plot")
map1 <- tm_shape(lisa_all) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Revenue/Tourist",
            main.title.size = 0.8)

map2 <- tm_shape(lisa_all) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I (Revenue/Tourist)",
            main.title.size = 0.8)

map3 <- tm_shape(lisa_th) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Revenue/Tourist (Thai)",
            main.title.size = 0.8)

map4 <- tm_shape(lisa_th) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I (Revenue/Tourist (Thai))",
            main.title.size = 0.8)

map5 <- tm_shape(lisa_fr) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Revenue/Tourist (Foreign)",
            main.title.size = 0.8)

map6 <- tm_shape(lisa_fr) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I (Revenue/Tourist (Foreign))",
            main.title.size = 0.8)


tmap_arrange(map1, map2, map3, map4, map5, map6, ncol = 2, nrow = 3)
```

```{r, fig.height=8, fig.width=6}
#| warning: false

# Filter output for only those that are statistically significant
lisa_all_sig <- lisa_all  %>%
  filter(p_ii_sim < 0.05)
lisa_th_sig <- lisa_th  %>%
  filter(p_ii_sim < 0.05)
lisa_fr_sig <- lisa_fr  %>%
  filter(p_ii_sim < 0.05)

# Visualize LISA maps for all Key indicators side by side
tmap_mode("plot")
map1 <- tm_shape(lisa_all) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_all_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) + 
  tm_layout(main.title = "LISA Map of Revenue/Tourist",
          main.title.size = 0.8)

map2 <- tm_shape(lisa_th) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_th_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) + 
  tm_layout(main.title = "LISA Map of Revenue/Tourist (Thai)",
          main.title.size = 0.8)

map3 <- tm_shape(lisa_fr) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_fr_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) + 
  tm_layout(main.title = "LISA Map of Revenue/Tourist (Foreign)",
          main.title.size = 0.8)

tmap_arrange(map1, map2, map3, ncol = 3)
```

# Overnight Guest

```{r, fig.height=8, fig.width=6}
#| warning: false
# Set seed
set.seed(24)

# Revenue/Overnight Guest
lisa_og <- th_tour_knn5_all %>%
  mutate(local_moran = local_moran(
    revenue_tourist_stay, nb, wt, nsim = 999),
    .before = 1) %>%
  unnest(local_moran)

# Proportion of Tourist who stay overnight
lisa_ogp <- th_tour_knn5_all %>%
  mutate(local_moran = local_moran(
    tourist_stay_all, nb, wt, nsim = 999),
    .before = 1) %>%
  unnest(local_moran)

# Visualize statistics and p-value plots for both key indicators together 
tmap_mode("plot")
map1 <- tm_shape(lisa_og) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Revenue/Overnight Guest",
            main.title.size = 0.8)

map2 <- tm_shape(lisa_og) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I (Revenue/Overnight Guest)",
            main.title.size = 0.8)

map3 <- tm_shape(lisa_ogp) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Overnight Tourist Proportion ",
            main.title.size = 0.8)

map4 <- tm_shape(lisa_ogp) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I (Overnight Tourist Proportion)",
            main.title.size = 0.8)


tmap_arrange(map1, map2, map3, map4, ncol = 2, nrow = 2)
```

```{r, fig.height=8, fig.width=6}
#| warning: false

# Filter output for only those that are statistically significant
lisa_og_sig <- lisa_og  %>%
  filter(p_ii_sim < 0.05)
lisa_ogp_sig <- lisa_ogp  %>%
  filter(p_ii_sim < 0.05)

# Visualize LISA maps for both Key indicators side by side
tmap_mode("plot")
map1 <- tm_shape(lisa_og) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_og_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) + 
  tm_layout(main.title = "LISA Map of Revenue/Overnight Guest",
          main.title.size = 0.8)

map2 <- tm_shape(lisa_ogp) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_ogp_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) + 
  tm_layout(main.title = "LISA Map of Overnight Tourist Proportion",
          main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```
:::

Unsurprisingly the plots for Revenue and Tourist are very similar. Nevertheless, they serve as a good indictor to show regions that are largely driven by foreign tourism ("High-High" on foreign proportion - near Phuket) and regions that are largely driven by domestic tourism ("High-High" on Thai proportion - near Nakhon Sawan).

The revenue spent per tourist highlights Bangkok as an outlier ("High-High") for both foreign and Thai tourists, signifying its status as a key tourist destination. Comparing the expenditure per Tourist for both foreign and Thai tourists, Khon Kaen stands out ("High-Low") for Thai tourist, suggesting a local tourist destination. Phatthalung stands out as "Low-High", suggesting that it is not as attractive to foreign tourists.

Looking at overnight guest indicators, while the revenue/overnight guests presents similar clusters as those in revenue/tourist, proportion of guests staying overnight highlights other insights. The "Low-High" of Phang Nga affirms the EDA hypothesis of tourists behaviour - wherein they are likely to center their trip around Phuket and making day trips to provinces around. Bangkok showing up as "High-Low" further cements its status as a main tourist destination.

## 4.2 Local Moran's I across Space and Time (Year)

Given the iterative process and charts, I created a function to generate the LISA chart. Using another function that iterates across different years, I can then visualize the changes with `tmap_animation`. While the Local Moran's I and p-value charts are not shown, it is believed that the main takeaway of the Local Moran's I is in the LISA chart (in order to identify clusters and outliers).

```{r}
# Function to generate LISA maps
local_moran_space <- function(data, col, value, kpi) {
  # Set Seed
  set.seed(42)
  
  # Filter sf dataframe
  filtered_data <- data %>%
    filter(!!sym(col) == value)
  
  # Append neighbour list and calculate spatial weight matrix
  filtered_data <- filtered_data %>%
    mutate(nb = nb_knn_5,
           wt = st_weights(nb, style = "W"),
           wt_inv = st_inverse_distance(include_self(nb), geometry = coords_cent, 
                                        scale = 100, alpha = 1),
           local_moran = local_moran(!!sym(kpi), nb, wt, nsim = 999),
           .before = 1) %>%
    unnest(local_moran)
  
  # Filter out non-significant results
  filter_sig <- filtered_data  %>%
    filter(p_ii_sim < 0.05)
  
  # Visualize clusters with LISA map
  map1 <- tm_shape(filtered_data) +
    tm_polygons() +
    tm_borders(alpha = 0.5) +
    tm_shape(filter_sig) +
    tm_fill("mean") + 
    tm_borders(alpha = 0.4) + 
    tm_layout(main.title = paste0("LISA Map of ",kpi," (",value, ")"),
              main.title.size = 0.4,
              legend.text.size = 0.3,
              legend.title.size = 0.4)

  return(map3)
}
```

::: panel-tabset
# Revenue

First, the animated chart for "revenue_thai_prop" has to be created.

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year, 
                                  col = "year", 
                                  value = value, 
                                  kpi = "revenue_thai_prop")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_thai_prop_year.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

Now I can view the LISA chart across each year.

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_thai_prop_year.gif")
```

Now i do the same for "revenue_foreign_prop".

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year, 
                                  col = "year", 
                                  value = value, 
                                  kpi = "revenue_foreign_prop")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_foreign_prop_year.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

And now I can visualize the gif.

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_foreign_prop_year.gif")
```

# Revenue/Tourist

In Revenue/Tourist, I am interested in "revenue_tourist_all", "revenue_tourist_thai" and "revenue_tourist_foreign". Lets create and view the gif for each of them.

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year, 
                                  col = "year", 
                                  value = value, 
                                  kpi = "revenue_tourist_all")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_tourist_all_year.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_tourist_all_year.gif")
```

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year, 
                                  col = "year", 
                                  value = value, 
                                  kpi = "revenue_tourist_thai")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_tourist_thai_year.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_tourist_thai_year.gif")
```

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year, 
                                  col = "year", 
                                  value = value, 
                                  kpi = "revenue_tourist_foreign")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_tourist_foreign_year.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_tourist_foreign_year.gif")
```

# Overnight Guest

Finally, for overnight guest key indicators, I'm interested in how the LISA chart will act for "revenue_tourist_stay" and "tourist_stay_all".

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year, 
                                  col = "year", 
                                  value = value, 
                                  kpi = "revenue_tourist_stay")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_tourist_stay_year.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_tourist_stay_year.gif")
```

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year, 
                                  col = "year", 
                                  value = value, 
                                  kpi = "tourist_stay_all")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_tourist_stay_all_year.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_tourist_stay_all_year.gif")
```
:::

When looking at the revenue proportion for Foreign tourists, I can see a group of provinces surrounding Phuket (exhibiting "high-high" behaviour across the years. They in turn are then surrounded by provinces exhibiting "low-high" for 2019-2020. In 2022, Krabi changed from "high-high" to "low-low", suggesting the impact of Covid on how foreign tourists not travelling less further from Phuket. Provinces intersperse around the middle of Thailand are "low-low" throughout the years, highlighting how tourism is driven by domestic travel in those provinces.

Looking at revenue per tourists, Bangkok is highlighted as "High-low" from 2019-2022. Zooming into foreign revenue per foreign tourist, Kachanaburi (border province) shows up as "High-low" during 2020. This could be because of Covid, more revenue generated from foreign tourists travelling across the border. A sizable number of provinces around the middle of Thailand are "low-low" throughout the years, for both foreign and Thai tourists, suggesting that either tourists do not spend much in those areas or goods and services are much cheaper in those areas.

The proportion of tourists who stay overnight shows how covid impacted Tourism, with Bangkok being "Low-Low" from 2021-2022.

## 4.3 Local Moran's I across Space and Time (Year and Month)

A slight adjustment when performing Local Moran's I across year and month is to reference the appropriate sf dataframe, the corresponding date column and list of dates. They have been used earlier when performing Global Moran's I, therefore I am able to reuse those objects. Key indicators used will mirror that of 4.2 for consistency.

::: panel-tabset
# Revenue

In Revenue, I will still be looking at "revenue_thai_prop" and "revenue_foreign_prop"

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_month_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year_month, 
                                  col = "date.y", 
                                  value = value, 
                                  kpi = "revenue_thai_prop")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_thai_prop_year_month.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_thai_prop_year_month.gif")
```

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_month_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year_month, 
                                  col = "date.y", 
                                  value = value, 
                                  kpi = "revenue_foreign_prop")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_foreign_prop_year_month.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_foreign_prop_year_month.gif")
```

# Revenue/Tourist

In Revenue/Tourist, I am interested in "revenue_tourist_all", "revenue_tourist_thai" and "revenue_tourist_foreign". Lets create and view the gif for each of them.

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_month_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year_month, 
                                  col = "date.y", 
                                  value = value, 
                                  kpi = "revenue_tourist_all")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_tourist_all_year_month.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_tourist_all_year_month.gif")
```

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_month_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year_month, 
                                  col = "date.y", 
                                  value = value, 
                                  kpi = "revenue_tourist_thai")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_tourist_thai_year_month.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_tourist_thai_year_month.gif")
```

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_month_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year_month, 
                                  col = "date.y", 
                                  value = value, 
                                  kpi = "revenue_tourist_foreign")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_tourist_foreign_year_month.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_tourist_foreign_year_month.gif")
```

# Overnight Guest

Likewise, I will do the same for the "revenue_tourist_stay" and "tourist_stay_all".

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_month_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year_month, 
                                  col = "date.y", 
                                  value = value, 
                                  kpi = "revenue_tourist_stay")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_revenue_tourist_stay_year_month.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_revenue_tourist_stay_year_month.gif")
```

```{r}
#| eval: false # eval: false
all_local_moran_maps <- lapply(year_month_list, function(value) {
  # Call the local_moran_space function for each value in the list
  map_result <- local_moran_space(data = th_bound_tour_year_month, 
                                  col = "date.y", 
                                  value = value, 
                                  kpi = "tourist_stay_all")
  
  return(map_result)  # Store the resulting map
})

tmap_animation(all_local_moran_maps, filename = "images/animated_tourist_stay_all_year_month.gif",
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

```{r}
# Visualize gif
knitr::include_graphics("images/animated_tourist_stay_all_year_month.gif")
```
:::

When performing Local Moran's I at a more granular level, observations align with those for Local Moran's I across year. An additional insight is that the impact of covid can be more clearly observed with clusters/outliers becoming extremely sparse during the covid period.

# 5 Spatio-Temporal Analysis of Thailand Tourism Key Indicators

To perform spatio-temporal analysis, I will be conducting the Mann-Kendall test with `MannKendall` from `Kendall` package for a brief look of emerging hotspots/coldspots, then a more rigorous Emerging Hotspot Analysis (EHSA) with `emerging_hotspot_analysis` from `sfdep` package.

## 5.1 Preprocessing

Before proceeding for EHSA, a spacetime cube has to be created first. This will be done using `spacetime` from sfdep package.

```{r}
# Load geospatial data
th_bound <- st_read(dsn = "data/tha_adm_rtsd_itos_20210121_shp/", layer = "tha_admbnda_adm1_rtsd_20220121") %>%
  st_transform(crs = 32647)

# Load processed aspatial data
th_aspatial <- read_rds('data/processed/tbl_tourism_wide.rds') %>%
  mutate(date_int = year(date)*12 + month(date)) %>%
  rename(ADM1_EN = province_eng)

# Create spacetime cube
th_bound_spt <- spacetime(th_aspatial, th_bound, .loc_col = "ADM1_EN", .time_col = "date_int")


# Check spacetime cube
is_spacetime_cube(th_bound_spt)
```

```{r}
# Apply neighbour list and spatial weights
th_bound_nb <- th_bound_spt %>%
  activate("geometry") %>%
  mutate(nb = include_self(nb_knn_5),
         wt = st_weights(nb),
         .before = 1) %>%
  set_nbs("nb") %>%
  set_wts("wt")
```

## 5.2 Mann-Kendall Test

In order to run Mann-Kendall test more efficiently for different key indicators, I'll use a function. The function is as follows:

1.  Set seed
2.  Compute Gi\*
3.  Perform Mann-Kendall Test for each province
4.  Post processing

```{r}
# Function to run Mann-Kendall iteratively
mann_kendall_function <- function(data, kpi) {
  # Set seed
  set.seed(42)
  
  # Compute Gi*
  gi_stars <- data %>%
    group_by(date) %>%
    mutate(gi_star = local_gstar_perm(!!sym(kpi), nb, wt)) %>%
    tidyr::unnest(gi_star)
  
  # Perform Mann-Kendall for each Province
  ehsa <- gi_stars %>%
    group_by(ADM1_EN) %>%
    summarise(mk = list(unclass(Kendall::MannKendall(gi_star)))) %>%
    tidyr::unnest_wider(mk)
  
  # Process output
  emerging <- ehsa %>%
    mutate(tau = round(tau, 5),
           sl = round(sl, 5),
           varS = round(varS, 3)) %>%
    arrange(sl, abs(tau))
  
  return(emerging)
}

```

::: panel-tabset
# Revenue

```{r}
# Run for foreign revenue proportion
emerging <- mann_kendall_function(th_bound_nb, "revenue_foreign_prop")

# Visualize output
datatable(emerging, rownames=FALSE, width="100%",
            options=list(initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff', 'font-family': 'sans-serif'});",
    "$(this.api().table().body()).css({'font-family': 'sans-serif'});",
    "}"
  )))
```

```{r}
# Run for thai revenue proportion
emerging <- mann_kendall_function(th_bound_nb, "revenue_thai_prop")

# Visualize output
datatable(emerging, rownames=FALSE, width="100%",
            options=list(initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff', 'font-family': 'sans-serif'});",
    "$(this.api().table().body()).css({'font-family': 'sans-serif'});",
    "}"
  )))
```

# Revenue/Tourist

```{r}
# Run for revenue/tourist
emerging <- mann_kendall_function(th_bound_nb, "revenue_tourist_all")

# Visualize output
datatable(emerging, rownames=FALSE, width="100%",
            options=list(initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff', 'font-family': 'sans-serif'});",
    "$(this.api().table().body()).css({'font-family': 'sans-serif'});",
    "}"
  )))
```

```{r}
# Run for revenue/tourist (Thai)
emerging <- mann_kendall_function(th_bound_nb, "revenue_tourist_thai")

# Visualize output
datatable(emerging, rownames=FALSE, width="100%",
            options=list(initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff', 'font-family': 'sans-serif'});",
    "$(this.api().table().body()).css({'font-family': 'sans-serif'});",
    "}"
  )))
```

```{r}
# Run for revenue/tourist (Foreign)
emerging <- mann_kendall_function(th_bound_nb, "revenue_tourist_foreign")

# Visualize output
datatable(emerging, rownames=FALSE, width="100%",
            options=list(initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff', 'font-family': 'sans-serif'});",
    "$(this.api().table().body()).css({'font-family': 'sans-serif'});",
    "}"
  )))
```

# Overnight Guest

```{r}
# Run for revenue/overnight guest
emerging <- mann_kendall_function(th_bound_nb, "revenue_tourist_stay")

# Visualize output
datatable(emerging, rownames=FALSE, width="100%",
            options=list(initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff', 'font-family': 'sans-serif'});",
    "$(this.api().table().body()).css({'font-family': 'sans-serif'});",
    "}"
  )))
```

```{r}
# Run for proportion of tourist who stay overnight
emerging <- mann_kendall_function(th_bound_nb, "tourist_stay_all")

# Visualize output
datatable(emerging, rownames=FALSE, width="100%",
            options=list(initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff', 'font-family': 'sans-serif'});",
    "$(this.api().table().body()).css({'font-family': 'sans-serif'});",
    "}"
  )))
```
:::

Looking at the Mann-Kendall Tsst across various key indicators, it shows provinces that are emerging hotspots and others that are emerging coldspots.

Specifically for Bangkok, while some key indicators are not statistically significant, it shows how it is an emerging coldspot with negative tau for revenue per tourist (foreign and Thai), suggesting the impact of Covid.

## 5.3 Emerging Hotspot Analysis

Similar to Mann-Kendall's Test, a function will be used for visualizing the output across different key indicators. Inspiration for the visualization (using a color mapper and histogram within the tmap plot) was taken from 1 of the previous seniors.

The functions for visualizing EHSA is as follows:

1.  Join the output to the original geospatial dataset
2.  Load the color mapping
3.  Filter the merged output from step 1 to include only statistically significant results
4.  Visualize EHSA output with `tmap` (including a histogram of the category counts)

```{r}
# Category List 
category_list <- c("consecutive coldspot", "consecutive hotspot", "new coldspot", "new hotspot", "no pattern detected", "intensifying coldspot", "intensifying hotspot", "oscilating coldspot", "oscilating hotspot", "persistent coldspot", "persistent hotspot", "sporadic coldspot", "sporadic hotspot"
)

# Color List
color_list <- c("#83CBEB", "#FF6161", "#DCEAF7", "#FFB3B3", "#7F7F7F", "#4E95D9", "#FF0101",
  "#D86ECB", "#F87306", "#104862", "#C00000", "#F2CFEE", "#FCB67C")

# Color Mapping Function
color_mapping <- function(category_list, color_list, mapping) {
  color <- rep(NA, length(mapping))
  for (i in seq_along(mapping))
  {
    match_index <- match(mapping[i], category_list)
    if (!is.na(match_index)) {
      color[i] <- color_list[match_index]
    }
  }
  return(color)
}
```

```{r}
# Visualize ehsa
ehsa_fun <- function(ehsa) {
  
  th_ehsa <- th_bound %>%
    left_join(ehsa, by = join_by(ADM1_EN == location))
  
  
  th_ehsa_sig <- th_ehsa  %>%
    filter(p_value < 0.05)
  
  color_mapping <- color_mapping(category_list, color_list, sort(unique(th_ehsa_sig$classification)))
  
  
  tm_shape(th_ehsa) +
    tm_polygons() +
    tm_borders(alpha = 0.5) +
    tm_shape(th_ehsa_sig) +
    tm_fill("classification", title = "Classification", palette = color_mapping,
            legend.hist = TRUE, legend.hist.z = 0.1) + 
    tm_borders(alpha = 0.4) +
    tm_layout(main.title = "Emerging Hotspots & Coldspots",
              main.title.position = "center",
              main.title.size = 0.8,
              main.title.fontface = "bold",
              legend.title.size = 0.6,
              legend.text.size = 0.6,
              legend.hist.width = 0.5)
}

```

::: panel-tabset
# Revenue

```{r}
#| eval: false # eval: false

# Set seed
set.seed(42)

# Run emerging hotspot analysis
ehsa <- emerging_hotspot_analysis(x = th_bound_spt, .var = "revenue_thai_prop", k = 1, nsim = 99)
```

Results are saved for ease of rendering

```{r}
# # Export output object and read it in to minimize rendering time
# write_rds(ehsa, 'data/output/ehsa_revenue_thai_prop.rds') # Uncomment when running the ehsa again

# Read in output object
ehsa <- read_rds('data/output/ehsa_revenue_thai_prop.rds')
```

```{r, fig.height = 8, fig.width=6}
#| warning: false 

# Visualize for Thai Revenue Proportion
ehsa_fun(ehsa)
```


```{r}
#| eval: false # eval: false

# Set seed
set.seed(42)

# Run emerging hotspot analysis
ehsa <- emerging_hotspot_analysis(x = th_bound_spt, .var = "revenue_foreign_prop", k = 1, nsim = 99)
```

Results are saved for ease of rendering

```{r}
# # Export output object and read it in to minimize rendering time
# write_rds(ehsa, 'data/output/ehsa_revenue_foreign_prop.rds') # Uncomment when running the ehsa again

# Read in output object
ehsa <- read_rds('data/output/ehsa_revenue_foreign_prop.rds')
```

```{r, fig.height = 8, fig.width=6}
#| warning: false 

# Visualize for Foreign Revenue Proportion
ehsa_fun(ehsa)
```

# Revenue/Tourist

```{r}
#| eval: false # eval: false

# Set seed
set.seed(42)

# Run emerging hotspot analysis
ehsa <- emerging_hotspot_analysis(x = th_bound_spt, .var = "revenue_tourist_all", k = 1, nsim = 99)
```

Results are saved for ease of rendering

```{r}
# # Export output object and read it in to minimize rendering time
# write_rds(ehsa, 'data/output/ehsa_revenue_tourist_all.rds') # Uncomment when running the ehsa again

# Read in output object
ehsa <- read_rds('data/output/ehsa_revenue_tourist_all.rds')
```

```{r, fig.height = 8, fig.width=6}
#| warning: false 

# Visualize for Revenue/Tourist
ehsa_fun(ehsa)
```

```{r}
#| eval: false # eval: false

# Set seed
set.seed(42)

# Run emerging hotspot analysis
ehsa <- emerging_hotspot_analysis(x = th_bound_spt, .var = "revenue_tourist_thai", k = 1, nsim = 99)
```

Results are saved for ease of rendering

```{r}
# # Export output object and read it in to minimize rendering time
# write_rds(ehsa, 'data/output/ehsa_revenue_tourist_thai.rds') # Uncomment when running the ehsa again

# Read in output object
ehsa <- read_rds('data/output/ehsa_revenue_tourist_thai.rds')
```

```{r, fig.height = 8, fig.width=6}
#| warning: false 

# Visualize for Revenue/Tourist (Thai)
ehsa_fun(ehsa)
```

```{r}
#| eval: false # eval: false

# Set seed
set.seed(42)

# Run emerging hotspot analysis
ehsa <- emerging_hotspot_analysis(x = th_bound_spt, .var = "revenue_tourist_foreign", k = 1, nsim = 99)
```

Results are saved for ease of rendering

```{r}
# # Export output object and read it in to minimize rendering time
# write_rds(ehsa, 'data/output/ehsa_revenue_tourist_foreign.rds') # Uncomment when running the ehsa again

# Read in output object
ehsa <- read_rds('data/output/ehsa_revenue_tourist_foreign.rds')
```

```{r, fig.height = 8, fig.width=6}
#| warning: false 

# Visualize for Revenue/Tourist (Foreign)
ehsa_fun(ehsa)
```

# Overnight Guest

```{r}
#| eval: false # eval: false

# Set seed
set.seed(42)

# Run emerging hotspot analysis
ehsa <- emerging_hotspot_analysis(x = th_bound_spt, .var = "revenue_tourist_stay", k = 1, nsim = 99)
```

Results are saved for ease of rendering

```{r}
# # Export output object and read it in to minimize rendering time
# write_rds(ehsa, 'data/output/ehsa_revenue_tourist_stay.rds') # Uncomment when running the ehsa again

# Read in output object
ehsa <- read_rds('data/output/ehsa_revenue_tourist_stay.rds')
```

```{r, fig.height = 8, fig.width=6}
#| warning: false 

# Visualize for Revenue/Overnight Guest
ehsa_fun(ehsa)
```

```{r}
#| eval: false # eval: false

# Set seed
set.seed(42)

# Run emerging hotspot analysis
ehsa <- emerging_hotspot_analysis(x = th_bound_spt, .var = "tourist_stay_all", k = 1, nsim = 99)
```

Results are saved for ease of rendering

```{r}
# # Export output object and read it in to minimize rendering time
# write_rds(ehsa, 'data/output/ehsa_tourist_stay_all.rds') # Uncomment when running the ehsa again

# Read in output object
ehsa <- read_rds('data/output/ehsa_tourist_stay_all.rds')
```

```{r, fig.height = 8, fig.width=6}
#| warning: false 

# Visualize for Proportion fo Tourists who stay overnight
ehsa_fun(ehsa)
```
:::

Similar to previous analysis, the result of Thai revenue proportion is a mirror of Foreign revenue proportion. A possible impact of Covid can be inferred from the large volume of sporadic coldspots for foreign revenue proportion and revenue per tourist.

Although majority of provinces are sporadic coldspot for revenue per tourist (foreign), there are a sizable number of provinces with that are sporadic hostpot, suggesting a potential rise in appeal of those provinces to foreign tourists. 

Looking at the overnight guests key indicators, there are a few intensifying coldspots (Chiang Rai and Phang Nga), indicating that the intensity of the cold spot has a statistically significant increase over time. This could be an impact of covid causing lesser tourists to decide staying overnight in those areas. 

# 6 Conclusion

Through Global Moran's I, I have established that the key indicators of Thailand's tourism economy is spatially dependent and spatio-temporal dependent. Local Moran's I was then used to further dive into how the individual provinces are to explore where the clusters/outliers are for different key indicators.

Exploratory Mann-Kendall and Emerging Hotspot Analysis are then used to highlight how those cluster/outliers change over time.

Through this, I deduce that there are a few key tourism areas. Bangkok is a consistent outlier ("High-Low") when performing Local Moran's I for several key indicators. 

Phuket is also another region, although different analysis points to how its surrounding provinces have been impact (by covid) over time. While those provinces are ("High-High") on foreign revenue proportion, they have been shown to decline over time ("Sporadic coldspots"), with Phang Nga especially being an intensifying coldspot for proportion of tourists staying overnight. 

Other regions include those in the middle (i.e. Uthai Thani), which are largely driven by domestic tourism in general. 

