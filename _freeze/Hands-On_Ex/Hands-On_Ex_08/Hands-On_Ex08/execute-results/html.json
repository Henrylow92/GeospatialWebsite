{
  "hash": "7db27819daaf2ac505f2517563769e6d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-On Exercise 08\"\nauthor: \"Henry Low\"\ndate: \"Oct 17 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  evalu: true\n  echo: true\n  message: false\n  freeze: true\nformat: html\neditor: visual\n---\n\n\n\n# Data Sources\n\n*(saved under 'data' folder)*\\\nA data file `mdata.rds` that consists of the following information:\n\n-   **Aspatial dataset**:\n    -   HDB Resale data: a list of HDB resale transacted prices in Singapore from Jan 2017 onwards. It is in csv format which can be downloaded from Data.gov.sg.\n-   **Geospatial dataset**:\n    -   *MP14_SUBZONE_WEB_PL*: a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg\n-   **Locational factors with geographic coordinates**:\n    -   Downloaded from **Data.gov.sg**.\n\n        -   **Eldercare** data is a list of eldercare in Singapore. It is in shapefile format.\n\n        -   **Hawker Centre** data is a list of hawker centres in Singapore. It is in geojson format.\n\n        -   **Parks** data is a list of parks in Singapore. It is in geojson format.\n\n        -   **Supermarket** data is a list of supermarkets in Singapore. It is in geojson format.\n\n        -   **CHAS clinics** data is a list of CHAS clinics in Singapore. It is in geojson format.\n\n        -   **Childcare service** data is a list of childcare services in Singapore. It is in geojson format.\n\n        -   **Kindergartens** data is a list of kindergartens in Singapore. It is in geojson format.\n\n    -   Downloaded from **Datamall.lta.gov.sg**.\n\n        -   **MRT** data is a list of MRT/LRT stations in Singapore with the station names and codes. It is in shapefile format.\n\n        -   **Bus stops** data is a list of bus stops in Singapore. It is in shapefile format.\n-   **Locational factors without geographic coordinates**:\n    -   Downloaded from **Data.gov.sg**.\n\n        -   **Primary school** data is extracted from the list on General information of schools from data.gov portal. It is in csv format.\n\n    -   Retrieved/Scraped from **other sources**\n\n        -   **CBD** coordinates obtained from Google.\n        -   **Shopping malls** data is a list of Shopping malls in Singapore obtained from [Wikipedia](https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore).\n        -   **Good primary schools** is a list of primary schools that are ordered in ranking in terms of popularity and this can be found at [Local Salary Forum](https://www.salary.sg/2021/best-primary-schools-2021-by-popularity).\n\n# Chapter 14: Geographically Weighted Predictive Models\n\n## 14.1 Setting Up\n\nGeospatial predictive modelling is conceptually rooted in the principle that the occurrences of events being modeled are limited in distribution. When geographically referenced data are used, occurrences of events are neither uniform nor random in distribution over space. There are geospatial factors (infrastructure, sociocultural, topographic, etc.) that constrain and influence where the locations of events occur. Geospatial predictive modeling attempts to describe those constraints and influences by spatially correlating occurrences of historical geospatial locations with environmental factors that represent those constraints and influences.\n\n### 14.1.1 Loading the R packages\n\n\\-`sf` package to perform geospatial wrangling tasks \\\n-`spdep` package to calculate spatial weights tasks \\\n- `GWModel` package for calibrating geographical weighted family of models \\\n- `SpatialML` package for calibrating geographical random forest model \\\n- `tmap` package for plotting tasks \\\n- `rsample` package to split the data into training and test sets \\\n- `Metrics`package for computing RMSE \\\n-`tidyverse` package for reading csv files, dataframe processing tasks \\\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n               tmap, rsample, Metrics, tidyverse)\n```\n:::\n\n\n\n### 14.1.2 Importing data\n\nFirst, I will import the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import input datasets\nmdata <- read_rds(\"data/mdata.rds\")\n```\n:::\n\n\n\n### 14.1.3 Data Sampling\n\nTo split the dataset into training and test splits, `initial_split()` from `rsample` package will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed\nset.seed(1234)\n\n# Train test split\nresale_split <- initial_split(mdata, \n                              prop = 6.5/10,)\n\n# Create train test datasets\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n```\n:::\n\n\n\nOnce done, those should be saved as RDS files.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save data to rds\nwrite_rds(train_data, \"data/processed/train_data.rds\")\nwrite_rds(test_data, \"data/processed/test_data.rds\")\n```\n:::\n\n\n\n## 14.2 Exploratory Data Analysis\n\nBefore building the model, we should always check the correlation matrix. Before doing so, I will need to drop the geometry data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Drop geometry data\nmdata_nogeo <- mdata %>%\n  st_drop_geometry()\n\n# Build correlation matrix\ncorrplot::corrplot(cor(mdata_nogeo[, 2:17]), \n                   diag = FALSE, \n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex08_files/figure-html/unnamed-chunk-5-1.png){width=1152}\n:::\n:::\n\n\n\nSince the correlation matrix shows that all values are below 0.8, there should not be any sign of multicolinearity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\ntrain_data <- read_rds(\"data/processed/train_data.rds\")\ntest_data <- read_rds(\"data/processed/test_data.rds\")\n```\n:::\n\n\n\n## 14.3 Building Non-Spatial Multiple Linear Regression\n\n`lm()` will be used to build a multiple linear regression model. `summary()` is then used to check the model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build model\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\n\n# Check model\nsummary(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              107601.073  10601.261  10.150  < 2e-16 ***\nfloor_area_sqm             2780.698     90.579  30.699  < 2e-16 ***\nstorey_order              14299.298    339.115  42.167  < 2e-16 ***\nremaining_lease_mths        344.490      4.592  75.027  < 2e-16 ***\nPROX_CBD                 -16930.196    201.254 -84.124  < 2e-16 ***\nPROX_ELDERLYCARE         -14441.025    994.867 -14.516  < 2e-16 ***\nPROX_HAWKER              -19265.648   1273.597 -15.127  < 2e-16 ***\nPROX_MRT                 -32564.272   1744.232 -18.670  < 2e-16 ***\nPROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\nPROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\nPROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\nWITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  < 2e-16 ***\nWITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  < 2e-16 ***\nWITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\nWITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61650 on 10320 degrees of freedom\nMultiple R-squared:  0.7373,\tAdjusted R-squared:  0.737 \nF-statistic:  2069 on 14 and 10320 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\nThe model is then saved for easy retrieval.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save model\nwrite_rds(price_mlr, \"data/model/price_mlr.rds\" ) \n```\n:::\n\n\n\n## 14.4 GWR Predictive Method\n\nFirst, I will calibrate the model. To do so, I would need to do the following:\n\n1.  Convert sf data frame to SpatialPointDataFrame\n2.  Compute adaptive bandwidth\n3.  Calibrate gwr-based hedonic pricing model with calculated adaptive bandwidth\n\n### 14.4.1 Calibrate GWR-based Model\n\nUsing `as_Spatial()`, I will convert the sf dataframe into SpatialPointDataFrame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert sf dataframe to SpatialPointDataFrame\ntrain_data_sp <- as_Spatial(train_data)\n\n# Check output\ntrain_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ... \n```\n\n\n:::\n:::\n\n\n\nNext, the adaptive bandwidth will be computed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute adaptive bandwidth\nbw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n\n\nThe output will be saved for easy retrieval\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save adaptive bandwidth\nwrite_rds(bw_adaptive, \"data/model/bw_adaptive.rds\")\n```\n:::\n\n\n\nBefore calibrating the gwr-based hedonic pricing model, I will first load in the adaptive bandwidth, then use `gwr.basic()` to calibrate the model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load adaptive bandwidth\nbw_adaptive <- read_rds(\"data/model/bw_adaptive.rds\")\n\n# Calibrate gwr-based hedonic pricing model\ngwr_adaptive <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data_sp,\n                          bw = 36, # bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n\n\nThe output will be saved again for easy retrieval.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save calibrated model\nwrite_rds(gwr_adaptive, \"data/model/gwr_adaptive.rds\")\n```\n:::\n\n\n\nI'll load it again and print it to check the model output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load calibrated model\ngwr_adaptive <- read_rds(\"data/model/gwr_adaptive.rds\")\n\n# Check model output\ngwr_adaptive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-10-18 00:57:38.90988 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data_sp, bw = bw_adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 10335\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\n   Coefficients:\n                              Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              107601.073  10601.261  10.150  < 2e-16 ***\n   floor_area_sqm             2780.698     90.579  30.699  < 2e-16 ***\n   storey_order              14299.298    339.115  42.167  < 2e-16 ***\n   remaining_lease_mths        344.490      4.592  75.027  < 2e-16 ***\n   PROX_CBD                 -16930.196    201.254 -84.124  < 2e-16 ***\n   PROX_ELDERLYCARE         -14441.025    994.867 -14.516  < 2e-16 ***\n   PROX_HAWKER              -19265.648   1273.597 -15.127  < 2e-16 ***\n   PROX_MRT                 -32564.272   1744.232 -18.670  < 2e-16 ***\n   PROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\n   PROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\n   PROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\n   WITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  < 2e-16 ***\n   WITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  < 2e-16 ***\n   WITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\n   WITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  < 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 61650 on 10320 degrees of freedom\n   Multiple R-squared: 0.7373\n   Adjusted R-squared: 0.737 \n   F-statistic:  2069 on 14 and 10320 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.922202e+13\n   Sigma(hat): 61610.08\n   AIC:  257320.2\n   AICc:  257320.3\n   BIC:  247249\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 40 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -3.2478e+08 -4.7727e+05 -8.3004e+03  5.5025e+05\n   floor_area_sqm           -2.8714e+04  1.4475e+03  2.3011e+03  3.3900e+03\n   storey_order              3.3186e+03  8.5899e+03  1.0826e+04  1.3397e+04\n   remaining_lease_mths     -1.4431e+03  2.6063e+02  3.9048e+02  5.2865e+02\n   PROX_CBD                 -1.0837e+07 -5.7697e+04 -1.3787e+04  2.6552e+04\n   PROX_ELDERLYCARE         -3.2195e+07 -4.0643e+04  1.0562e+04  6.1054e+04\n   PROX_HAWKER              -2.3985e+08 -5.1365e+04  3.0026e+03  6.4287e+04\n   PROX_MRT                 -1.1632e+07 -1.0488e+05 -4.9373e+04  5.1037e+03\n   PROX_PARK                -6.5961e+06 -4.8671e+04 -8.8128e+02  5.3498e+04\n   PROX_MALL                -1.8112e+07 -7.4238e+04 -1.3982e+04  4.9779e+04\n   PROX_SUPERMARKET         -4.5761e+06 -6.3461e+04 -1.7429e+04  3.5616e+04\n   WITHIN_350M_KINDERGARTEN -4.1823e+05 -6.0040e+03  9.0209e+01  4.7127e+03\n   WITHIN_350M_CHILDCARE    -1.0273e+05 -2.2375e+03  2.6668e+02  2.6388e+03\n   WITHIN_350M_BUS          -1.1757e+05 -1.4719e+03  1.1626e+02  1.7584e+03\n   WITHIN_1KM_PRISCH        -6.6465e+05 -5.5959e+03  2.6916e+02  5.7500e+03\n                                  Max.\n   Intercept                1.6493e+08\n   floor_area_sqm           5.0907e+04\n   storey_order             2.9537e+04\n   remaining_lease_mths     1.8119e+03\n   PROX_CBD                 2.2411e+07\n   PROX_ELDERLYCARE         8.2444e+07\n   PROX_HAWKER              5.9654e+06\n   PROX_MRT                 2.0189e+08\n   PROX_PARK                1.5188e+07\n   PROX_MALL                1.0443e+07\n   PROX_SUPERMARKET         3.8330e+06\n   WITHIN_350M_KINDERGARTEN 6.6799e+05\n   WITHIN_350M_CHILDCARE    1.0802e+05\n   WITHIN_350M_BUS          3.7313e+04\n   WITHIN_1KM_PRISCH        5.0231e+05\n   ************************Diagnostic information*************************\n   Number of data points: 10335 \n   Effective number of parameters (2trace(S) - trace(S'S)): 1730.101 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 8604.899 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 238871.9 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 237036.9 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 238209.1 \n   Residual sum of squares: 4.829191e+12 \n   R-square value:  0.967657 \n   Adjusted R-square value:  0.9611534 \n\n   ***********************************************************************\n   Program stops at: 2024-10-18 00:58:38.865141 \n```\n\n\n:::\n:::\n\n\n\n### 14.4.2 Compute Predicted Values\n\nTo compute the predicted values of test data, I would need to do mostly the same steps as before, with the exception of the last step. Instead of calibrating with `gwr.basic()`, i will use `gwr.predict()` to compute the predicted values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert test sf dataframe into SpatialDataPointFrame\ntest_data_sp <- as_Spatial(test_data)\n\n# Check output\ntest_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 5566 \nextent      : 11597.31, 42623.63, 28287.8, 48669.59  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,         PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       230888,             74,            1,                  546, 1.00583660772922, 3.34897933104965e-07, 0.0474019664161957, 0.0414043955932523, 0.0502664084494264, 0.0907500295577619,                0, 4.55547870890763e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1050000,            138,           14,                 1151,  19.632402730488,     3.30163731686804,   2.83106651960209,   2.13060636038504,   2.41313695915468,   10.6169590126272, 2.26056404492346,     0.79249074802552,     1.53786629004208,                        7,                    16, ... \n```\n\n\n:::\n:::\n\n\n\nNext, I'll compute the adaptive bandwidth for the test data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute test data adaptive bandwidth\ngwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n\n\nThe output will be saved again for easy retrieval.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save test adaptive bandwidth\nwrite_rds(gwr_bw_test_adaptive, \"data/model/gwr_bw_test_adaptive.rds\")\n```\n:::\n\n\n\nI'll load it again and print it to check the model output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load calibrated model\ngwr_bw_test_adaptive <- read_rds(\"data/model/gwr_bw_test_adaptive.rds\")\n```\n:::\n\n\n\nFinally, I can compute the predicted values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute predicted values\ngwr_pred <- gwr.predict(formula = resale_price ~\n                          floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_MRT + PROX_PARK + PROX_MALL + \n                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                          WITHIN_1KM_PRISCH, \n                        data=train_data_sp, \n                        predictdata = test_data_sp, \n                        bw = 36, # bw = 40, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)\n```\n:::\n\n\n\n## 14.5 Prepare Coordinates Data\n\nBefore proceeding to calibrate other models, I will need to prepare the coordinates data. This can be extracted using `st_coordinates()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get coordinates from full, training and test data\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n\n\nAs with previous, these will be saved for easy retrieval\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train <- write_rds(coords_train, \"data/processed/coords_train.rds\")\ncoords_test <- write_rds(coords_test, \"data/processed/coords_test.rds\")\n```\n:::\n\n\n\nOther than that, I will also need to remove the geometry column of the training data as I proceed to the next section. This will be done using the `st_drop_geometry()` from `sf` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Drop geometry\ntrain_data <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n\n\n## 14.6 Calibrating Random Forest Model\n\nUsing the random forest function of the `ranger` package, I will be able to calibrate a model to predict HDB resale prices.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed\nset.seed(1234)\n\n# Calibrate random forest model\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data)\n```\n:::\n\n\n\nAgain, I will save the output for easy retrieval.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save ranger output\nwrite_rds(rf, \"data/model/rf.rds\")\n```\n:::\n\n\n\nNow, I will load in the ranger model and check the output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load ranger output\nrf <- read_rds(\"data/model/rf.rds\")\n\n# Check output\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       728602496 \nR squared (OOB):                  0.9495728 \n```\n\n\n:::\n:::\n\n\n\n## 14.7 Calibrate Geographical Random Forest Model\n\nNow, I will calibrate a model to do the same task using `grf()` from the `SpatialML` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed\nset.seed(42)\n\n# Calibrate geographic random forest model\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data, \n                     bw=55,\n                     ntree = 100, # default - 500\n                     mtry = 2, # default - p/3 ~ 4\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n```\n:::\n\n\n\nI will save this output for easy retrieval\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save model output\nwrite_rds(gwRF_adaptive, \"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n\n\nNow, I will load it in.\n\n::: {.callout-note}\nDo not check the output by printing it. It is *very* huge\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load model output\ngwRF_adaptive <- read_rds(\"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n\n\n### 14.7.1 Predicting with Test Data\n\nTo predict with the test data, I will need to first combine the test data with the coordinates data. As with the training data, `st_drop_geometry()` will be used to drop the geometry column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine test data with coordinates\ntest_data <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n\nNext, `predict.grf()` from `SpatialML` package will be used to predict the resale value.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute predicted values\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                         test_data, \n                         x.var.name=\"X\",\n                         y.var.name=\"Y\", \n                         local.w=1,\n                         global.w=0,\n                         nthreads = 4)\n```\n:::\n\n\n\nI will save this into rds for easy retrieval\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save output\nGRF_pred <- write_rds(gwRF_pred, \"data/model/GRF_pred.rds\")\n```\n:::\n\n\n\nI will load this in and do further data processing. To facilitate visualization and analysis, I will convert it into a dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load output\nGRF_pred <- read_rds(\"data/model/GRF_pred.rds\")\nGRF_pred_df <- as.data.frame(GRF_pred)\n```\n:::\n\n\n\nThis will be combined with the test data to be saved as a version of the test data containing the predicted values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine predicted values with test data\ntest_data_p <- cbind(test_data, GRF_pred_df)\n\n# Save output\nwrite_rds(test_data_p, \"data/model/test_data_p.rds\")\n```\n:::\n\n\n\n### 14.7.2 Calculate Root Mean Square Error\n\nRoot mean square error (RMSE) is a common metric for regression that allows us to measure the gap between the predicted values from observed values. `rmse()` from `Metrics` package is used to compute this metric.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute rmse\nrmse(test_data_p$resale_price, \n     test_data_p$GRF_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28891.61\n```\n\n\n:::\n:::\n\n\n\nAnother way of checking the gap between actual resale prices and predicted resale prices is by plotting a scatterplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot scatterplot\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex08_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note}\nA better predictive model should have the scatter point close to the diagonal line. The scatter plot can be also used to detect if any outliers in the model.\n:::\n",
    "supporting": [
      "Hands-On_Ex08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}