{
  "hash": "283296882a095f84f7fd69c019afdf1a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 01\"\nauthor: \"Henry Low\"\ndate: \"Sep 2 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  evalu: true\n  echo: true\n  message: false\n  freeze: true\nformat: html\neditor: visual\n---\n\n\n\n# Background\n\nRoad traffic accidents cause 1.19 million deaths and 20 to 50 million injuries annually, with most fatalities occurring in low- and middle-income countries (World Health Organisation (WHO)). Road traffic injuries are the leading cause of death for individuals aged 5–29 and place a heavy economic burden on nations, costing up to 3% of GDP. Thailand has some of the deadliest roads globally, with about 20,000 fatalities annually. From 2014 to 2021, accidents rose, especially on national highways, with black spots frequently found on straight roads and intersections.\n\n# Objectives\n\nFocusing in the Bangkok Metropolitan Region (BMR), Spatial Point Patterns Analysis (SPPA) will be used to explore and identify factors influencing road traffic accidents. Such facts are mainly behavioral and environmental, with this exercise aiming to incorporate temporal factors as well. Specific objectives are as follows:\\\n- To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\\\n- To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\\\n- To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\n# Study Area\n\nThe study area will be Bangkok Metropolitan Region, which is defined [here](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region).\n\n# Data Sources\n\n*(saved under 'data' folder)*\\\n[Thailand Road Accident 2019-2022](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) from Kaggle\\\n[Thailand Roads (OpenStreetMap Export) from HDX](https://s3.dualstack.us-east-1.amazonaws.com/production-raw-data-api/ISO3/THA/roads/lines/hotosm_tha_roads_lines_shp.zip)\\\n[Thailand - Subnational Administrative Boundaries from HDX](https://data.humdata.org/dataset/cod-ab-tha?)...[Click here to download here](https://data.humdata.org/dataset/d24bdc45-eb4c-4e3d-8b16-44db02667c27/resource/d0c722ff-6939-4423-ac0d-6501830b1759/download/tha_adm_rtsd_itos_20210121_shp.zip)\n\n# 1. Setting Up\n\n## 1.1 Loading R Packages\n\nI will be using the following R packages:\\\n-`sf` package to perform geospatial wrangling tasks \\\n- `spatstat` package to perform 1st- and 2nd-order spatial point patterns analysis \\\n- `spNetwork` package to perform network kernel density estimation (NKDE) and temporal network kernel density estimation \\\n- `tidyverse` package for reading csv files, dataframe processing tasks \\\n- `tmap` package for plotting tasks \\\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, spatstat, sf, spNetwork, tmap)\n```\n:::\n\n\n\n## 1.2 Loading Datasets\n\n### 1.2.1 Thailand Road Accidents Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load 2019-2020 Road Accidents Data\nra_tbl <- read_csv('data/thai_road_accident_2019_2022.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 81735 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): province_th, province_en, agency, route, vehicle_type, presumed_c...\ndbl   (6): acc_code, number_of_vehicles_involved, number_of_fatalities, numb...\ndttm  (2): incident_datetime, report_datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check data\nglimpse(ra_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 81,735\nColumns: 18\n$ acc_code                    <dbl> 571905, 3790870, 599075, 571924, 599523, 5…\n$ incident_datetime           <dttm> 2019-01-01 00:00:00, 2019-01-01 00:03:00,…\n$ report_datetime             <dttm> 2019-01-02 06:11:00, 2020-02-20 13:48:00,…\n$ province_th                 <chr> \"ลพบุรี\", \"อุบลราชธานี\", \"ประจวบคีรีขันธ์\", \"เชียงใ…\n$ province_en                 <chr> \"Loburi\", \"Ubon Ratchathani\", \"Prachuap Kh…\n$ agency                      <chr> \"department of rural roads\", \"department o…\n$ route                       <chr> \"แยกทางหลวงหมายเลข 21 (กม.ที่ 31+000) - บ้านวั…\n$ vehicle_type                <chr> \"motorcycle\", \"private/passenger car\", \"mo…\n$ presumed_cause              <chr> \"driving under the influence of alcohol\", …\n$ accident_type               <chr> \"other\", \"rollover/fallen on straight road…\n$ number_of_vehicles_involved <dbl> 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, …\n$ number_of_fatalities        <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 3, 0, 0, 1, 0, 0, …\n$ number_of_injuries          <dbl> 2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 1, 0, 1, 1, …\n$ weather_condition           <chr> \"clear\", \"clear\", \"clear\", \"clear\", \"clear…\n$ latitude                    <dbl> 14.959105, 15.210738, 12.374259, 18.601721…\n$ longitude                   <dbl> 100.87346, 104.86269, 99.90795, 98.80420, …\n$ road_description            <chr> \"straight road\", \"straight road\", \"wide cu…\n$ slope_description           <chr> \"no slope\", \"no slope\", \"slope area\", \"no …\n```\n\n\n:::\n:::\n\n\n\n### 1.2.2 Thailand Openstreet Map Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Thailand Roads from Openstreet Map\nth_road <- st_read(dsn = \"data/hotosm_tha_roads_lines_shp/\", layer = \"hotosm_tha_roads_lines_shp\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\Users\\Henry\\Desktop\\SMU Masters\\2024-2025 T1\\Geospatial Analytics & Applications\\Project\\GeospatialWebsite\\Take-Home_Ex\\Take-Home_Ex_01\\data\\hotosm_tha_roads_lines_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check data\n# glimpse(th_road)\nhead(th_road, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 100.7831 ymin: 13.73046 xmax: 100.7913 ymax: 13.74091\nCRS:           NA\n            name               name_en        highway  surface smoothness width\n1     ถนนฉลองกรุง    Chalong Krung Road      secondary    paved       <NA>  <NA>\n2 ซอยฉลองกรุง 1/1 Soi Chalong Krung 1/1    residential     <NA>       <NA>  <NA>\n3           <NA>                  <NA> secondary_link     <NA>       <NA>  <NA>\n4           <NA>                  <NA>        service     <NA>       <NA>  <NA>\n5     ถนนฉลองกรุง    Chalong Krung Road      secondary concrete       <NA>  <NA>\n  lanes oneway bridge layer source        name_th     osm_id  osm_type\n1  <NA>    yes   <NA>  <NA>   <NA>     ถนนฉลองกรุง 1125681229 ways_line\n2  <NA>   <NA>   <NA>  <NA>   <NA> ซอยฉลองกรุง 1/1  594401607 ways_line\n3  <NA>    yes   <NA>  <NA>   <NA>           <NA>  472283206 ways_line\n4  <NA>   <NA>   <NA>  <NA>   <NA>           <NA>  594401608 ways_line\n5     2    yes    yes     1   Bing     ถนนฉลองกรุง  116847248 ways_line\n                        geometry\n1 MULTILINESTRING ((100.7913 ...\n2 MULTILINESTRING ((100.7882 ...\n3 MULTILINESTRING ((100.7844 ...\n4 MULTILINESTRING ((100.7873 ...\n5 MULTILINESTRING ((100.7831 ...\n```\n\n\n:::\n:::\n\n\n\n### 1.2.3 Thailand Subnational Administrative Boundaries\n\nBased on the description from HDX, there are a few administrative boundaries:\\\n- Level 0: Country\\\n- Level 1: Province\\\n- Level 2: District\\\n- Level 3: Sub-District, Tambon\n\nWhile the dataset contains other `shp` files, the focus will be on those levels.\n\n::: panel-tabset\n# Level 0\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Thailand Country from HDX\nth_bound_l0 <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp/\", layer = \"tha_admbnda_adm0_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm0_rtsd_20220121' from data source \n  `C:\\Users\\Henry\\Desktop\\SMU Masters\\2024-2025 T1\\Geospatial Analytics & Applications\\Project\\GeospatialWebsite\\Take-Home_Ex\\Take-Home_Ex_01\\data\\tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 13 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(th_bound_l0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 14\n$ Shape_Leng <dbl> 106.6359\n$ Shape_Area <dbl> 43.40351\n$ ADM0_EN    <chr> \"Thailand\"\n$ ADM0_TH    <chr> \"ประเทศไทย\"\n$ ADM0_PCODE <chr> \"TH\"\n$ ADM0_REF   <chr> NA\n$ ADM0ALT1EN <chr> NA\n$ ADM0ALT2EN <chr> NA\n$ ADM0ALT1TH <chr> NA\n$ ADM0ALT2TH <chr> NA\n$ date       <date> 2019-02-18\n$ validOn    <date> 2022-01-22\n$ validTo    <date> -001-11-30\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.0903 6....\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize the boundaries\nplot(st_geometry(th_bound_l0))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n# Level 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Thailand Province from HDX\nth_bound_l1 <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp/\", layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\Users\\Henry\\Desktop\\SMU Masters\\2024-2025 T1\\Geospatial Analytics & Applications\\Project\\GeospatialWebsite\\Take-Home_Ex\\Take-Home_Ex_01\\data\\tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(th_bound_l1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 17\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.6139 13..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize the boundaries\nplot(st_geometry(th_bound_l1))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n# Level 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Thailand Province from HDX\nth_bound_l2 <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp/\", layer = \"tha_admbnda_adm2_rtsd_20220121\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `C:\\Users\\Henry\\Desktop\\SMU Masters\\2024-2025 T1\\Geospatial Analytics & Applications\\Project\\GeospatialWebsite\\Take-Home_Ex\\Take-Home_Ex_01\\data\\tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(th_bound_l2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 928\nColumns: 20\n$ Shape_Leng <dbl> 0.08541733, 0.13413177, 0.67634217, 0.08588647, 0.30172202,…\n$ Shape_Area <dbl> 0.0004504685, 0.0009501914, 0.0198588627, 0.0003369561, 0.0…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Dusit\", \"Nong Chok\", \"Bang Rak\", \"Bang Khen…\n$ ADM2_TH    <chr> \"พระนคร\", \"ดุสิต\", \"หนองจอก\", \"บางรัก\", \"บางเขน\", \"บางกะปิ\", \"ป…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1002\", \"TH1003\", \"TH1004\", \"TH1005\", \"TH1006\",…\n$ ADM2_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.5007 13..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize the boundaries\nplot(st_geometry(th_bound_l2))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n# Level 3\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Thailand Province from HDX\nth_bound_l3 <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp/\", layer = \"tha_admbnda_adm3_rtsd_20220121\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm3_rtsd_20220121' from data source \n  `C:\\Users\\Henry\\Desktop\\SMU Masters\\2024-2025 T1\\Geospatial Analytics & Applications\\Project\\GeospatialWebsite\\Take-Home_Ex\\Take-Home_Ex_01\\data\\tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 7425 features and 22 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(th_bound_l3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 7,425\nColumns: 23\n$ Shape_Leng <dbl> 0.04769920, 0.03355050, 0.01728931, 0.01904576, 0.01523190,…\n$ Shape_Area <dbl> 1.284175e-04, 6.068479e-05, 1.769761e-05, 1.920433e-05, 1.2…\n$ ADM3_EN    <chr> \"Phraborom Maharatchawang\", \"Wang Burapha Phirom\", \"Wat Rat…\n$ ADM3_TH    <chr> \"พระบรมมหาราชวัง\", \"วังบูรพาภิรมย์\", \"วัดราชบพิธ\", \"สำราญราษฎร์\", \"…\n$ ADM3_PCODE <chr> \"TH100101\", \"TH100102\", \"TH100103\", \"TH100104\", \"TH100105\",…\n$ ADM3_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\",…\n$ ADM2_TH    <chr> \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\",…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\",…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.4945 13..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize the boundaries\nplot(st_geometry(th_bound_l3))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n:::\n\n### 1.2.4 Basic Preprocessing\n\nFrom a quick look of the various datasets, it is clear that preprocessing is required in order to filter the datasets to:\\\n1. Focus on the study area (Bangkok Metropolitan Region)\\\n2. Work with smaller data to better manage R session memory handling\n\nOther geospatial preprocessing steps will also be taken accordingly. Once done, these datasets will be saved as RDS files for easy retrieval.\n\n#### 1.2.4.1 Processing Thailand Road Accident\n\nThe Thailand road accident dataset will be processed to: - remove blanks/na from longitude/latitude (mitigate errors when converting into sf object) - filtered to Bangkok Metropolitan Region - convert tibble dataframe to sf dataframe - project to Thailand coordinate reference system for alignment and visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform Thailand Road Accident data\nra_tbl_flt <- ra_tbl %>%\n  filter(!is.na(longitude) & longitude != \"\", !is.na(latitude) & latitude != \"\") %>%\n  filter(province_en %in% c(\"Bangkok\", \"Nonthaburi\", \"Pathum Thani\", \n                              \"Samut Prakan\", \"Samut Sakhon\", \"Nakhon Pathom\")) %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%\n  st_transform(crs = 32647)\n```\n:::\n\n\n\nThe processed data is then exported as RDS.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Export to processed sub-folder as RDS\nwrite_rds(ra_tbl_flt, 'data/processed/th_acc.rds')\n```\n:::\n\n\n\n#### 1.2.4.2 Processing Thailand Subnational Administrative Boundaries\n\nWhile level 1 was sufficient to filter the boundary to the study area, level 3 was selected for the flexibility purposes.\n\nThe level 3 Thailand Subnational Administrative Boundaries will be processed based to: - filtered to Bangkok Metropolitan Region - project to Thailand coordinate reference system for alignment and visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter Thai boundary for only Bangkok Metropolitan Region\nth_bound_l3_flt <- th_bound_l3 %>%\n  filter(ADM1_EN %in% c(\"Bangkok\", \"Nonthaburi\", \"Pathum Thani\", \n                              \"Samut Prakan\", \"Samut Sakhon\", \"Nakhon Pathom\"))%>%\n  st_transform(crs = 32647) \n\nglimpse(th_bound_l3_flt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 477\nColumns: 23\n$ Shape_Leng <dbl> 0.04769920, 0.03355050, 0.01728931, 0.01904576, 0.01523190,…\n$ Shape_Area <dbl> 1.284175e-04, 6.068479e-05, 1.769761e-05, 1.920433e-05, 1.2…\n$ ADM3_EN    <chr> \"Phraborom Maharatchawang\", \"Wang Burapha Phirom\", \"Wat Rat…\n$ ADM3_TH    <chr> \"พระบรมมหาราชวัง\", \"วังบูรพาภิรมย์\", \"วัดราชบพิธ\", \"สำราญราษฎร์\", \"…\n$ ADM3_PCODE <chr> \"TH100101\", \"TH100102\", \"TH100103\", \"TH100104\", \"TH100105\",…\n$ ADM3_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\",…\n$ ADM2_TH    <chr> \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\",…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\",…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((661579 1521..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\n\nThe processed data is again exported as RDS.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Export to processed sub-folder as RDS\nwrite_rds(th_bound_l3_flt, 'data/processed/th_bound_l3.rds')\n```\n:::\n\n\n\n#### 1.2.4.1 Processing Thailand Openstreet Map Data\n\nGiven the large openstreet map dataset (\\~2.7m objects), the dataset needs to be filtered prior to performing `st_intersects`.\\\nThis will be done by selecting the relevant highway attributes. Relevant highway attributes are defined following the [default access restrictions](https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Default_Access_Restrictions) based on the Road Traffic Act, 1979 for various different vehicle types.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check types of highway in Openstreet Map data\ntable(ra_tbl_flt$vehicle_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n        4-wheel pickup truck                6-wheel truck \n                        3522                          472 \n            7-10-wheel truck                      bicycle \n                         389                           18 \n     large passenger vehicle     large truck with trailer \n                          76                          998 \n                  motorcycle           motorized tricycle \n                        1687                           14 \n                       other       passenger pickup truck \n                        1088                           63 \n                  pedestrian        private/passenger car \n                          18                         4486 \ntractor/agricultural vehicle                          van \n                           1                          154 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check types of highway in Openstreet Map data\ntable(th_road$highway)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     abandoned        barrier      bridleway         busway   construction \n             5              1              6             35           1008 \n      corridor       cycleway         escape        footway  living_street \n            77            961              3          55110             35 \n      motorway  motorway_link          parth           path          paved \n          2330           2122              1          26824              1 \n    pedestrian        primary   primary_link       proposed        raceway \n           847          15026           6690             17             53 \n   residential           road      secondary secondary_link        service \n       1323154            730          26754           5063         896514 \n         steps       tertiary  tertiary_link          track          trunk \n          5330          34507           1371         254299          14433 \n    trunk_link   unclassified \n          9304         109979 \n```\n\n\n:::\n:::\n\n\n\nGiven that accidents involving pedestrian and bicycle etc are proportionately smaller than those involving motorcar and motorcycle, the openstreet map data will be filtered to include relevant highway attribute for the latter vehicle types.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter Thai Openstreet Map data by highway types \nth_road_flt <- th_road %>%\n  filter(highway %in% c('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential',  # Roads\n                        'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link',  # Link Roads\n                        'living_street', 'road', 'path'\n                        ) \n         ) %>%\n  st_set_crs(., 4326) %>%\n  st_transform(crs = 32647) \nglimpse(th_road_flt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,578,322\nColumns: 15\n$ name       <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวั…\n$ name_en    <chr> \"Chalong Krung Road\", \"Soi Chalong Krung 1/1\", NA, \"Chalong…\n$ highway    <chr> \"secondary\", \"residential\", \"secondary_link\", \"secondary\", …\n$ surface    <chr> \"paved\", NA, NA, \"concrete\", NA, \"unpaved\", NA, NA, NA, NA,…\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ lanes      <chr> NA, NA, NA, \"2\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ oneway     <chr> \"yes\", NA, \"yes\", \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ bridge     <chr> NA, NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ layer      <chr> NA, NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ source     <chr> NA, NA, NA, \"Bing\", NA, \"GPS\", NA, \"digitalglobe\", \"digital…\n$ name_th    <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวั…\n$ osm_id     <dbl> 1125681229, 594401607, 472283206, 116847248, 378672881, 123…\n$ osm_type   <chr> \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((693686.1 ..., MULTILINEST…\n```\n\n\n:::\n:::\n\n\n\n`st_intersects` is then used to return openstreet map objects that are within the study area.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Use st_union to get overall study area boundary\nth_bound_union <- th_bound_l3_flt %>%\n  st_union()\n\n# Use st_intersects to get roads within the study area\nth_roads_intersects <- st_intersects(th_road_flt, th_bound_union)\n\n# Get index mask of roads objects that intersects with study area \nroads_logical <- lengths(th_roads_intersects) > 0\n# Filter openstreet map with the index mask\nth_roads_bmr <- th_road_flt[roads_logical, ]\n\n\nglimpse(th_roads_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 306,168\nColumns: 15\n$ name       <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวั…\n$ name_en    <chr> \"Chalong Krung Road\", \"Soi Chalong Krung 1/1\", NA, \"Chalong…\n$ highway    <chr> \"secondary\", \"residential\", \"secondary_link\", \"secondary\", …\n$ surface    <chr> \"paved\", NA, NA, \"concrete\", NA, NA, NA, NA, NA, NA, NA, NA…\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ lanes      <chr> NA, NA, NA, \"2\", NA, NA, NA, NA, NA, NA, \"3\", NA, NA, NA, N…\n$ oneway     <chr> \"yes\", NA, \"yes\", \"yes\", NA, NA, NA, NA, NA, NA, \"yes\", NA,…\n$ bridge     <chr> NA, NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ layer      <chr> NA, NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ source     <chr> NA, NA, NA, \"Bing\", NA, NA, NA, \"Bing\", NA, NA, NA, NA, NA,…\n$ name_th    <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวั…\n$ osm_id     <dbl> 1125681229, 594401607, 472283206, 116847248, 378672881, 694…\n$ osm_type   <chr> \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((693686.1 ..., MULTILINEST…\n```\n\n\n:::\n:::\n\n\n\nThe processed openstreet map dataset is then exported in a similar fashion\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Export to processed sub-folder as RDS\nwrite_rds(th_roads_bmr, 'data/processed/th_osm.rds')\n```\n:::\n\n\n\n# 2. Exploratory Data Analysis\n\n## 2.1 Setting Up Environtment from Processed Datasets\n\nFirst, we clear the R console, then load in the processed datasets. This is a suitable starting point to bypass the long loading/processing time of the various large datasets.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clear R console\nrm(list = ls(all.names = TRUE))\n```\n:::\n\n\n\n::: panel-tabset\n# Accidents\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nra_sf <- read_rds('data/processed/th_acc.rds')\n\n# Check data\nglimpse(ra_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 12,986\nColumns: 17\n$ acc_code                    <dbl> 571882, 600001, 605043, 629691, 571887, 59…\n$ incident_datetime           <dttm> 2019-01-01 02:25:00, 2019-01-01 03:00:00,…\n$ report_datetime             <dttm> 2019-01-02 17:32:00, 2019-01-05 10:33:00,…\n$ province_th                 <chr> \"นครปฐม\", \"นนทบุรี\", \"สมุทรปราการ\", \"กรุงเทพมห…\n$ province_en                 <chr> \"Nakhon Pathom\", \"Nonthaburi\", \"Samut Prak…\n$ agency                      <chr> \"department of rural roads\", \"department o…\n$ route                       <chr> \"แยกทางหลวงหมายเลข 4 (กม.ที่ 51+920) - บ้านวัด…\n$ vehicle_type                <chr> \"motorcycle\", \"private/passenger car\", \"pr…\n$ presumed_cause              <chr> \"speeding\", \"speeding\", \"running red light…\n$ accident_type               <chr> \"rollover/fallen on straight road\", \"rollo…\n$ number_of_vehicles_involved <dbl> 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 2, …\n$ number_of_fatalities        <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, …\n$ number_of_injuries          <dbl> 2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, …\n$ weather_condition           <chr> \"clear\", \"clear\", \"clear\", \"clear\", \"clear…\n$ road_description            <chr> \"straight road\", \"straight road\", \"other\",…\n$ slope_description           <chr> \"no slope\", \"no slope\", \"other\", \"other\", …\n$ geometry                    <POINT [m]> POINT (627012.3 1533381), POINT (655…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check crs\nst_crs(ra_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n\n# Administrative Boundary\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nth_bound_sf <- read_rds('data/processed/th_bound_l3.rds')\n\n# Check data\nglimpse(th_bound_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 477\nColumns: 23\n$ Shape_Leng <dbl> 0.04769920, 0.03355050, 0.01728931, 0.01904576, 0.01523190,…\n$ Shape_Area <dbl> 1.284175e-04, 6.068479e-05, 1.769761e-05, 1.920433e-05, 1.2…\n$ ADM3_EN    <chr> \"Phraborom Maharatchawang\", \"Wang Burapha Phirom\", \"Wat Rat…\n$ ADM3_TH    <chr> \"พระบรมมหาราชวัง\", \"วังบูรพาภิรมย์\", \"วัดราชบพิธ\", \"สำราญราษฎร์\", \"…\n$ ADM3_PCODE <chr> \"TH100101\", \"TH100102\", \"TH100103\", \"TH100104\", \"TH100105\",…\n$ ADM3_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\",…\n$ ADM2_TH    <chr> \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\",…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\",…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((661579 1521..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check crs\nst_crs(th_bound_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n\n# Openstreet Map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nth_osm_sf <- read_rds('data/processed/th_osm.rds')\n\n# Check data\nglimpse(th_osm_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 306,168\nColumns: 15\n$ name       <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวั…\n$ name_en    <chr> \"Chalong Krung Road\", \"Soi Chalong Krung 1/1\", NA, \"Chalong…\n$ highway    <chr> \"secondary\", \"residential\", \"secondary_link\", \"secondary\", …\n$ surface    <chr> \"paved\", NA, NA, \"concrete\", NA, NA, NA, NA, NA, NA, NA, NA…\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ lanes      <chr> NA, NA, NA, \"2\", NA, NA, NA, NA, NA, NA, \"3\", NA, NA, NA, N…\n$ oneway     <chr> \"yes\", NA, \"yes\", \"yes\", NA, NA, NA, NA, NA, NA, \"yes\", NA,…\n$ bridge     <chr> NA, NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ layer      <chr> NA, NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ source     <chr> NA, NA, NA, \"Bing\", NA, NA, NA, \"Bing\", NA, NA, NA, NA, NA,…\n$ name_th    <chr> \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวั…\n$ osm_id     <dbl> 1125681229, 594401607, 472283206, 116847248, 378672881, 694…\n$ osm_type   <chr> \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((693686.1 ..., MULTILINEST…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check crs\nst_crs(th_osm_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n:::\n\n## 2.2 Microsoft Power Bi Visualization\n\n::: {style=\"position: relative; width: 100%; height: 0; padding-bottom: 56.25%;\"}\n<iframe title=\"Geospatial TakeHome Ex01\" src=\"https://app.powerbi.com/view?r=eyJrIjoiZmMxMTNjMzEtYzhmMy00NTgwLTlkMjctODE1ZTA5YjNmN2E3IiwidCI6ImRmNGU4MzA3LWRjNjQtNDcyYS1iNGI1LWE2ZGQ2YmExMTU2NiIsImMiOjEwfQ%3D%3D\" frameborder=\"0\" allowFullScreen=\"true\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\">\n\n</iframe>\n:::\n\n# 3. Spatial Point Pattern Analysis\n\nBefore any meaningful analysis between any factors and accidents can be made, we need to know if the accidents events occur following a pattern or at random via spatial point patterns analysis. This analysis can also help us to understand if the events vary due to changes in underlying property (e.g. road types) or if they vary due to interaction effects betwee This will be established through first-order and second-order spatial point pattern analysis.\n\n## 3.1 First-Order Spatial Point Pattern Analysis\n\nUnder this section, Kernel Density Estimation and Nearest Neighbour Distance will be explored as density-based and distance-based techniques respectively. This is bearing in mind their respective strengths.\n\n### 3.1.1 Density-Based: Kernel Density Estimation\n\nAdditional preparation is required to perform the analysis. These include:\\\n- Preparing the accident data in ppp object for `spatstat`\\\n- Checking the accident data for duplicates\\\n- Preparing the owin object\\\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed to ensure reproducibility of all subsequent analysis\nset.seed(42)\n\n# Convert accidents data to ppp format\nra_ppp <- as.ppp(ra_sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in as.ppp.sf(ra_sf): only first attribute column is used for marks\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check accidents events for duplicates\nany(duplicated(ra_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create owin object\nth_bound_owin <- as.owin(th_bound_sf)\n\n# Combine events object and owin object\nra_th_bound_ppp <-  ra_ppp[th_bound_owin]\n\n# Rescale ppp from meter to kilometer\nra_th_bound_ppp_km <- rescale.ppp(ra_th_bound_ppp, 1000, \"km\")\n```\n:::\n\n\n\n### 3.1.1.1 Adaptive Kernel Density Estimation\n\nBased on the context of road accidents, adaptive kernel density estimation is more appropriate than fixed kernel density estimation as the accidents are more heterogeneous as observed from the EDA.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform adative bandwith KDE\nkde_ra_adp <- adaptive.density(ra_th_bound_ppp_km, method=\"kernel\")\nplot(kde_ra_adp, \n     main = paste0(\"Adaptive KDE\"),\n     cex.axis = 0.8)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\nThe intensities can be observed as small strips, which are notable roads (i.e. Kanchanaphisek Road) where sizable proportions of the accidents happen. This\n\nLets see if there are any differences when looking at individual provinces.\n\n::: panel-tabset\n# Bangkok\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create Bangkok ppp object\nra_bk_ppp <- ra_sf %>%\n  filter(province_en == 'Bangkok') %>%\n  as.ppp()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create Bangkok owin object\nbk_owin <- th_bound_sf %>%\n  filter(ADM1_EN == 'Bangkok') %>%\n  as.owin()\n\n# Combine events object and owin object\nra_bk_bound <-  ra_bk_ppp[bk_owin]\n\n# Rescale ppp from meter to kilometer\nra_bk_bound_km <- rescale.ppp(ra_bk_bound, 1000, \"km\")\n\n# Perform adaptive bandwidth KDE\nkde_ra_adp_bk <- adaptive.density(ra_bk_bound_km, method=\"kernel\")\nplot(kde_ra_adp_bk, \n     main = paste0(\"Adaptive KDE: Bangkok\"),\n     cex.axis = 0.8)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n# Nonthaburi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create Nonthaburi ppp object\nra_ntb_ppp <- ra_sf %>%\n  filter(province_en == 'Nonthaburi') %>%\n  as.ppp()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create Nonthaburi owin object\nntb_owin <- th_bound_sf %>%\n  filter(ADM1_EN == 'Nonthaburi') %>%\n  as.owin()\n\n# Combine events object and owin object\nra_ntb_bound <-  ra_ntb_ppp[ntb_owin]\n\n# Rescale ppp from meter to kilometer\nra_ntb_bound_km <- rescale.ppp(ra_ntb_bound, 1000, \"km\")\n\n# Perform adaptive bandwidth KDE\nkde_ra_adp_ntb <- adaptive.density(ra_ntb_bound_km, method=\"kernel\")\nplot(kde_ra_adp_ntb, \n     main = paste0(\"Adaptive KDE: Nonthaburi\"),\n     cex.axis = 0.8)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n# Pathum Thani\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create Pathum Thani ppp object\nra_pt_ppp <- ra_sf %>%\n  filter(province_en == 'Pathum Thani') %>%\n  as.ppp()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create Pathum Thani owin object\npt_owin <- th_bound_sf %>%\n  filter(ADM1_EN == 'Pathum Thani') %>%\n  as.owin()\n\n# Combine events object and owin object\nra_pt_bound <-  ra_pt_ppp[pt_owin]\n\n# Rescale ppp from meter to kilometer\nra_pt_bound_km <- rescale.ppp(ra_pt_bound, 1000, \"km\")\n\n# Perform adaptive bandwidth KDE\nkde_ra_adp_pt <- adaptive.density(ra_pt_bound_km, method=\"kernel\")\nplot(kde_ra_adp_pt, \n     main = paste0(\"Adaptive KDE: Pathum Thani\"),\n     cex.axis = 0.8)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n# Samut Prakan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create Samut Prakan ppp object\nra_sp_ppp <- ra_sf %>%\n  filter(province_en == 'Samut Prakan') %>%\n  as.ppp()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create Samut Prakan owin object\nsp_owin <- th_bound_sf %>%\n  filter(ADM1_EN == 'Samut Prakan') %>%\n  as.owin()\n\n# Combine events object and owin object\nra_sp_bound <-  ra_sp_ppp[sp_owin]\n\n# Rescale ppp from meter to kilometer\nra_sp_bound_km <- rescale.ppp(ra_sp_bound, 1000, \"km\")\n\n# Perform adaptive bandwidth KDE\nkde_ra_adp_sp <- adaptive.density(ra_sp_bound_km, method=\"kernel\")\nplot(kde_ra_adp_sp, \n     main = paste0(\"Adaptive KDE: Samut Prakan\"),\n     cex.axis = 0.8)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n# Samut Sakhon\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create Samut Sakhon ppp object\nra_ss_ppp <- ra_sf %>%\n  filter(province_en == 'Samut Sakhon') %>%\n  as.ppp()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create Samut Sakhon owin object\nss_owin <- th_bound_sf %>%\n  filter(ADM1_EN == 'Samut Sakhon') %>%\n  as.owin()\n\n# Combine events object and owin object\nra_ss_bound <-  ra_ss_ppp[ss_owin]\n\n# Rescale ppp from meter to kilometer\nra_ss_bound_km <- rescale.ppp(ra_ss_bound, 1000, \"km\")\n\n# Perform adaptive bandwidth KDE\nkde_ra_adp_ss <- adaptive.density(ra_ss_bound_km, method=\"kernel\")\nplot(kde_ra_adp_ss, \n     main = paste0(\"Adaptive KDE: Samut Sakhon\"),\n     cex.axis = 0.8)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n# Nakhon Pathom\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create Nakhon Pathom ppp object\nra_np_ppp <- ra_sf %>%\n  filter(province_en == 'Nakhon Pathom') %>%\n  as.ppp()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create Nakhon Pathom owin object\nnp_owin <- th_bound_sf %>%\n  filter(ADM1_EN == 'Nakhon Pathom') %>%\n  as.owin()\n\n# Combine events object and owin object\nra_np_bound <-  ra_np_ppp[np_owin]\n\n# Rescale ppp from meter to kilometer\nra_np_bound_km <- rescale.ppp(ra_np_bound, 1000, \"km\")\n\n# Perform adaptive bandwidth KDE\nkde_ra_adp_np <- adaptive.density(ra_np_bound_km, method=\"kernel\")\nplot(kde_ra_adp_np, \n     main = paste0(\"Adaptive KDE: Nakhon Pathom\"),\n     cex.axis = 0.8)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n:::\n\nConclusion: \n\n### 3.1.1.2 Fixed Kernel Density Estimation\n\nWhile fixed KDE is less applicable, it will be interesting to compare the output with adaptive KDE.\n\n`bw.ppl()` will be used as the automatic kernel method to determine the sigma as the pattern seems to consist mostly of tight clusters around major roads.\\\nGaussian will be the smoothing kernel of choice, as it is widely used and there are no negative events in the current context.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get fixed bandwidth \nfixed_bw <- bw.ppl(ra_th_bound_ppp_km)\n\n# Perform fixed kernel density estimation\nplot(density(ra_th_bound_ppp_km, sigma=fixed_bw, edge=TRUE, kernel=\"gaussian\"), \n     main = paste0(\"Fixed KDE: Bandwidth=\", round(fixed_bw, 4)),\n     cex.axis = 0.8)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\nInterestingly,\n\n### 3.1.2 Distance-Based: Nearest Neighbour Index\n\n`clarkevans.test()` of spatstat will be used to perform the Clark-Evans test of aggregation.\\\nH0: Distribution of road accidents are randomly distributed \nH1: Distribution of road accidents are *not* randomly distributed\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform Clark-Evans on study area \nclarkevans.test(ra_th_bound_ppp,\n                correction=\"none\",\n                clipregion=\"th_bound_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99 # 100 simulation runs\n                )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ra_th_bound_ppp\nR = 0.19109, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\nConclusion: \n\nNow lets do the same for each province\n\n::: panel-tabset\n# Bangkok\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform Clark-Evans on Bangkok\nclarkevans.test(ra_bk_bound,\n                correction=\"none\",\n                clipregion=\"bk_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99 # 100 simulation runs\n                )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ra_bk_bound\nR = 0.12115, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\n# Nonthaburi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform Clark-Evans on Nonthaburi\nclarkevans.test(ra_ntb_bound,\n                correction=\"none\",\n                clipregion=\"ntb_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99 # 100 simulation runs\n                )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ra_ntb_bound\nR = 0.38919, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\n# Pathum Thani\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform Clark-Evans on Pathum Thani\nclarkevans.test(ra_pt_bound,\n                correction=\"none\",\n                clipregion=\"pt_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99 # 100 simulation runs\n                )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ra_pt_bound\nR = 0.24798, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\n# Samut Prakan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform Clark-Evans on Samut Prakan\nclarkevans.test(ra_sp_bound,\n                correction=\"none\",\n                clipregion=\"sp_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99 # 100 simulation runs\n                )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ra_sp_bound\nR = 0.14367, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\n# Samut Sakhon\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform Clark-Evans on Samut Sakhon\nclarkevans.test(ra_ss_bound,\n                correction=\"none\",\n                clipregion=\"ss_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99 # 100 simulation runs\n                )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ra_ss_bound\nR = 0.23989, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\n# Nakhon Pathom\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform Clark-Evans on Nakhon Pathom\nclarkevans.test(ra_np_bound,\n                correction=\"none\",\n                clipregion=\"np_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99 # 100 simulation runs\n                )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ra_np_bound\nR = 0.28949, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n:::\n\nConclusion: \n\n## 3.2 Second-Order Spatial Point Pattern Analysis\n\n### 3.2.1\n\n\n\n# 4 Network Spatial Point Pattern Analysis\n\n# 5 Temporal Network Spatial Point Patterns Analysis\n\n# 6. Conclusion\n",
    "supporting": [
      "Take-Home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}