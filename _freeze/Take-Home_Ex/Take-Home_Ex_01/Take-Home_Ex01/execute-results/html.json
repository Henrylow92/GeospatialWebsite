{
  "hash": "bef3b371e7e56d4a7f0edc5af2de3e0d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 01\"\nauthor: \"Henry Low\"\ndate: \"Sep 2 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  evalu: true\n  echo: true\n  message: false\n  freeze: true\nformat: html\neditor: visual\n---\n\n\n\n# Background\n\nRoad traffic accidents cause 1.19 million deaths and 20 to 50 million injuries annually, with most fatalities occurring in low- and middle-income countries (World Health Organisation (WHO)). Road traffic injuries are the leading cause of death for individuals aged 5–29 and place a heavy economic burden on nations, costing up to 3% of GDP. Thailand has some of the deadliest roads globally, with about 20,000 fatalities annually. From 2014 to 2021, accidents rose, especially on national highways, with black spots frequently found on straight roads and intersections.\n\n# Objectives\n\nFocusing in the Bangkok Metropolitan Region (BMR), Spatial Point Patterns Analysis (SPPA) will be used to explore and identify factors influencing road traffic accidents. Such facts are mainly behavioral and environmental, with this exercise aiming to incorporate temporal factors as well. Specific objectives are as follows:\\\n- To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\\\n- To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\\\n- To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\n# Study Area\n\nThe study area will be Bangkok Metropolitan Region, which is defined [here](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region).\n\n# Data Sources\n\n*(saved under 'data' folder)*\\\n[Thailand Road Accident 2019-2022](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) from Kaggle\\\n[Thailand Roads (OpenStreetMap Export) from HDX](https://s3.dualstack.us-east-1.amazonaws.com/production-raw-data-api/ISO3/THA/roads/lines/hotosm_tha_roads_lines_shp.zip)\\\n[Thailand - Subnational Administrative Boundaries from HDX](https://data.humdata.org/dataset/cod-ab-tha?)...[Click here to download here](https://data.humdata.org/dataset/d24bdc45-eb4c-4e3d-8b16-44db02667c27/resource/d0c722ff-6939-4423-ac0d-6501830b1759/download/tha_adm_rtsd_itos_20210121_shp.zip)\n\n# 1. Setting Up\n\n## 1.1 Loading R Packages\n\nI will be using the following R packages:\\\n-`sf` package to perform geospatial wrangling tasks \\\n- `spatstat` package to calculate nearest neighbour \\\n- `spNetwork` package to perform network kernel density estimation (NKDE) and temporal network kernel density estimation \\\n- `tidyverse` package for reading csv files, dataframe processing tasks \\\n- `tmap` package for plotting tasks \\\n- `classInt` and `viridis` to generate gif animation for temporal network kernel density estimation.\\\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, spatstat, sf, spNetwork, tmap, classInt, viridis)\n```\n:::\n\n\n\n## 1.2 Loading Datasets\n\n### 1.2.1 Thailand Road Accidents Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load 2019-2020 Road Accidents Data\nra_tbl <- read_csv('data/thai_road_accident_2019_2022.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 81735 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): province_th, province_en, agency, route, vehicle_type, presumed_c...\ndbl   (6): acc_code, number_of_vehicles_involved, number_of_fatalities, numb...\ndttm  (2): incident_datetime, report_datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check data\nglimpse(ra_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 81,735\nColumns: 18\n$ acc_code                    <dbl> 571905, 3790870, 599075, 571924, 599523, 5…\n$ incident_datetime           <dttm> 2019-01-01 00:00:00, 2019-01-01 00:03:00,…\n$ report_datetime             <dttm> 2019-01-02 06:11:00, 2020-02-20 13:48:00,…\n$ province_th                 <chr> \"ลพบุรี\", \"อุบลราชธานี\", \"ประจวบคีรีขันธ์\", \"เชียงใ…\n$ province_en                 <chr> \"Loburi\", \"Ubon Ratchathani\", \"Prachuap Kh…\n$ agency                      <chr> \"department of rural roads\", \"department o…\n$ route                       <chr> \"แยกทางหลวงหมายเลข 21 (กม.ที่ 31+000) - บ้านวั…\n$ vehicle_type                <chr> \"motorcycle\", \"private/passenger car\", \"mo…\n$ presumed_cause              <chr> \"driving under the influence of alcohol\", …\n$ accident_type               <chr> \"other\", \"rollover/fallen on straight road…\n$ number_of_vehicles_involved <dbl> 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, …\n$ number_of_fatalities        <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 3, 0, 0, 1, 0, 0, …\n$ number_of_injuries          <dbl> 2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 1, 0, 1, 1, …\n$ weather_condition           <chr> \"clear\", \"clear\", \"clear\", \"clear\", \"clear…\n$ latitude                    <dbl> 14.959105, 15.210738, 12.374259, 18.601721…\n$ longitude                   <dbl> 100.87346, 104.86269, 99.90795, 98.80420, …\n$ road_description            <chr> \"straight road\", \"straight road\", \"wide cu…\n$ slope_description           <chr> \"no slope\", \"no slope\", \"slope area\", \"no …\n```\n\n\n:::\n:::\n\n\n\n### 1.2.2 Thailand Openstreet Map Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Thailand Roads from Openstreet Map\nth_road <- st_read(dsn = \"data/hotosm_tha_roads_lines_shp/\", layer = \"hotosm_tha_roads_lines_shp\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\Users\\Henry\\Desktop\\SMU Masters\\2024-2025 T1\\Geospatial Analytics & Applications\\Project\\GeospatialWebsite\\Take-Home_Ex\\Take-Home_Ex_01\\data\\hotosm_tha_roads_lines_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check data\n# glimpse(th_road)\nhead(th_road, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 100.7831 ymin: 13.73046 xmax: 100.7913 ymax: 13.74091\nCRS:           NA\n            name               name_en        highway  surface smoothness width\n1     ถนนฉลองกรุง    Chalong Krung Road      secondary    paved       <NA>  <NA>\n2 ซอยฉลองกรุง 1/1 Soi Chalong Krung 1/1    residential     <NA>       <NA>  <NA>\n3           <NA>                  <NA> secondary_link     <NA>       <NA>  <NA>\n4           <NA>                  <NA>        service     <NA>       <NA>  <NA>\n5     ถนนฉลองกรุง    Chalong Krung Road      secondary concrete       <NA>  <NA>\n  lanes oneway bridge layer source        name_th     osm_id  osm_type\n1  <NA>    yes   <NA>  <NA>   <NA>     ถนนฉลองกรุง 1125681229 ways_line\n2  <NA>   <NA>   <NA>  <NA>   <NA> ซอยฉลองกรุง 1/1  594401607 ways_line\n3  <NA>    yes   <NA>  <NA>   <NA>           <NA>  472283206 ways_line\n4  <NA>   <NA>   <NA>  <NA>   <NA>           <NA>  594401608 ways_line\n5     2    yes    yes     1   Bing     ถนนฉลองกรุง  116847248 ways_line\n                        geometry\n1 MULTILINESTRING ((100.7913 ...\n2 MULTILINESTRING ((100.7882 ...\n3 MULTILINESTRING ((100.7844 ...\n4 MULTILINESTRING ((100.7873 ...\n5 MULTILINESTRING ((100.7831 ...\n```\n\n\n:::\n:::\n\n\n\n### 1.2.3 Thailand Subnational Administrative Boundaries\n\nBased on the description from HDX, there are a few administrative boundaries:\\\n- Level 0: Country\\\n- Level 1: Province\\\n- Level 2: District\\\n- Level 3: Sub-District, Tambon\n\nWhile the dataset contains other `shp` files, the focus will be on those levels.\n\n::: panel-tabset\n# Level 0\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Thailand Country from HDX\nth_bound_l0 <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp/\", layer = \"tha_admbnda_adm0_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm0_rtsd_20220121' from data source \n  `C:\\Users\\Henry\\Desktop\\SMU Masters\\2024-2025 T1\\Geospatial Analytics & Applications\\Project\\GeospatialWebsite\\Take-Home_Ex\\Take-Home_Ex_01\\data\\tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 13 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(th_bound_l0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 14\n$ Shape_Leng <dbl> 106.6359\n$ Shape_Area <dbl> 43.40351\n$ ADM0_EN    <chr> \"Thailand\"\n$ ADM0_TH    <chr> \"ประเทศไทย\"\n$ ADM0_PCODE <chr> \"TH\"\n$ ADM0_REF   <chr> NA\n$ ADM0ALT1EN <chr> NA\n$ ADM0ALT2EN <chr> NA\n$ ADM0ALT1TH <chr> NA\n$ ADM0ALT2TH <chr> NA\n$ date       <date> 2019-02-18\n$ validOn    <date> 2022-01-22\n$ validTo    <date> -001-11-30\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.0903 6....\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize the boundaries\nplot(st_geometry(th_bound_l0))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n# Level 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Thailand Province from HDX\nth_bound_l1 <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp/\", layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\Users\\Henry\\Desktop\\SMU Masters\\2024-2025 T1\\Geospatial Analytics & Applications\\Project\\GeospatialWebsite\\Take-Home_Ex\\Take-Home_Ex_01\\data\\tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(th_bound_l1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 17\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.6139 13..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize the boundaries\nplot(st_geometry(th_bound_l1))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n# Level 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Thailand Province from HDX\nth_bound_l2 <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp/\", layer = \"tha_admbnda_adm2_rtsd_20220121\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `C:\\Users\\Henry\\Desktop\\SMU Masters\\2024-2025 T1\\Geospatial Analytics & Applications\\Project\\GeospatialWebsite\\Take-Home_Ex\\Take-Home_Ex_01\\data\\tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(th_bound_l2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 928\nColumns: 20\n$ Shape_Leng <dbl> 0.08541733, 0.13413177, 0.67634217, 0.08588647, 0.30172202,…\n$ Shape_Area <dbl> 0.0004504685, 0.0009501914, 0.0198588627, 0.0003369561, 0.0…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Dusit\", \"Nong Chok\", \"Bang Rak\", \"Bang Khen…\n$ ADM2_TH    <chr> \"พระนคร\", \"ดุสิต\", \"หนองจอก\", \"บางรัก\", \"บางเขน\", \"บางกะปิ\", \"ป…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1002\", \"TH1003\", \"TH1004\", \"TH1005\", \"TH1006\",…\n$ ADM2_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.5007 13..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize the boundaries\nplot(st_geometry(th_bound_l2))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n# Level 3\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Thailand Province from HDX\nth_bound_l3 <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp/\", layer = \"tha_admbnda_adm3_rtsd_20220121\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm3_rtsd_20220121' from data source \n  `C:\\Users\\Henry\\Desktop\\SMU Masters\\2024-2025 T1\\Geospatial Analytics & Applications\\Project\\GeospatialWebsite\\Take-Home_Ex\\Take-Home_Ex_01\\data\\tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 7425 features and 22 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(th_bound_l3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 7,425\nColumns: 23\n$ Shape_Leng <dbl> 0.04769920, 0.03355050, 0.01728931, 0.01904576, 0.01523190,…\n$ Shape_Area <dbl> 1.284175e-04, 6.068479e-05, 1.769761e-05, 1.920433e-05, 1.2…\n$ ADM3_EN    <chr> \"Phraborom Maharatchawang\", \"Wang Burapha Phirom\", \"Wat Rat…\n$ ADM3_TH    <chr> \"พระบรมมหาราชวัง\", \"วังบูรพาภิรมย์\", \"วัดราชบพิธ\", \"สำราญราษฎร์\", \"…\n$ ADM3_PCODE <chr> \"TH100101\", \"TH100102\", \"TH100103\", \"TH100104\", \"TH100105\",…\n$ ADM3_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\",…\n$ ADM2_TH    <chr> \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\",…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\",…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.4945 13..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize the boundaries\nplot(st_geometry(th_bound_l3))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n:::\n\n### 1.2.4 Basic Preprocessing\n\nFrom a quick look of the various datasets, it is clear that preprocessing is required in order to filter the datasets to:\\\n1. Focus on the study area (Bangkok Metropolitan Region)\\\n2. Work with smaller data to better manage R session memory handling\n\nOther geospatial preprocessing steps will also be taken accordingly. Once done, these datasets will be saved as RDS files for easy retrieval.\n\n#### 1.2.4.1 Processing Thailand Road Accident\n\nThe Thailand road accident dataset will be processed to: - remove blanks/na from longitude/latitude (mitigate errors when converting into sf object) - filtered to Bangkok Metropolitan Region - convert tibble dataframe to sf dataframe - project to Thailand coordinate reference system for alignment and visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform Thailand Road Accident data\nra_tbl_flt <- ra_tbl %>%\n  filter(!is.na(longitude) & longitude != \"\", !is.na(latitude) & latitude != \"\") %>%\n  filter(province_en %in% c(\"Bangkok\", \"Nonthaburi\", \"Pathum Thani\", \n                              \"Samut Prakan\", \"Samut Sakhon\", \"Nakhon Pathom\")) %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%\n  st_transform(crs = 32647)\n\n# Check for duplicates\nany(duplicated(st_coordinates(ra_tbl_flt)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nSince there are duplicates, as this may affect further analysis, `st_jitter` of sf will be used\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nra_tbl_flt_jittered <- st_jitter(ra_tbl_flt, amount = 0.1)\n```\n:::\n\n\n\nThe processed data is then exported as RDS.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Export to processed sub-folder as RDS\nwrite_rds(ra_tbl_flt_jittered, 'data/processed/th_acc.rds')\n```\n:::\n\n\n\n#### 1.2.4.2 Processing Thailand Subnational Administrative Boundaries\n\nWhile level 1 was sufficient to filter the boundary to the study area, level 3 was selected for the flexibility purposes.\n\nThe level 3 Thailand Subnational Administrative Boundaries will be processed based to: - filtered to Bangkok Metropolitan Region - project to Thailand coordinate reference system for alignment and visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter Thai boundary for only Bangkok Metropolitan Region\nth_bound_l3_flt <- th_bound_l3 %>%\n  filter(ADM1_EN %in% c(\"Bangkok\", \"Nonthaburi\", \"Pathum Thani\", \n                              \"Samut Prakan\", \"Samut Sakhon\", \"Nakhon Pathom\"))%>%\n  st_transform(crs = 32647) \n\nglimpse(th_bound_l3_flt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 477\nColumns: 23\n$ Shape_Leng <dbl> 0.04769920, 0.03355050, 0.01728931, 0.01904576, 0.01523190,…\n$ Shape_Area <dbl> 1.284175e-04, 6.068479e-05, 1.769761e-05, 1.920433e-05, 1.2…\n$ ADM3_EN    <chr> \"Phraborom Maharatchawang\", \"Wang Burapha Phirom\", \"Wat Rat…\n$ ADM3_TH    <chr> \"พระบรมมหาราชวัง\", \"วังบูรพาภิรมย์\", \"วัดราชบพิธ\", \"สำราญราษฎร์\", \"…\n$ ADM3_PCODE <chr> \"TH100101\", \"TH100102\", \"TH100103\", \"TH100104\", \"TH100105\",…\n$ ADM3_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\",…\n$ ADM2_TH    <chr> \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\",…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\",…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((661579 1521..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\n\nThe processed data is again exported as RDS.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Export to processed sub-folder as RDS\nwrite_rds(th_bound_l3_flt, 'data/processed/th_bound_l3.rds')\n```\n:::\n\n\n\n#### 1.2.4.1 Processing Thailand Openstreet Map Data\n\nGiven the large openstreet map dataset (\\~2.7m objects), the dataset needs to be filtered prior to performing `st_intersects`.\\\nThis will be done by selecting the relevant highway attributes. Relevant highway attributes are defined following the [default access restrictions](https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Default_Access_Restrictions) based on the Road Traffic Act, 1979 for various different vehicle types.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check types of highway in Openstreet Map data\ntable(ra_tbl_flt$vehicle_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n        4-wheel pickup truck                6-wheel truck \n                        3522                          472 \n            7-10-wheel truck                      bicycle \n                         389                           18 \n     large passenger vehicle     large truck with trailer \n                          76                          998 \n                  motorcycle           motorized tricycle \n                        1687                           14 \n                       other       passenger pickup truck \n                        1088                           63 \n                  pedestrian        private/passenger car \n                          18                         4486 \ntractor/agricultural vehicle                          van \n                           1                          154 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check types of highway in Openstreet Map data\ntable(th_road$highway)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     abandoned        barrier      bridleway         busway   construction \n             5              1              6             35           1008 \n      corridor       cycleway         escape        footway  living_street \n            77            961              3          55110             35 \n      motorway  motorway_link          parth           path          paved \n          2330           2122              1          26824              1 \n    pedestrian        primary   primary_link       proposed        raceway \n           847          15026           6690             17             53 \n   residential           road      secondary secondary_link        service \n       1323154            730          26754           5063         896514 \n         steps       tertiary  tertiary_link          track          trunk \n          5330          34507           1371         254299          14433 \n    trunk_link   unclassified \n          9304         109979 \n```\n\n\n:::\n:::\n\n\n\nGiven that accidents involving pedestrian and bicycle etc are proportionately smaller than those involving motorcar and motorcycle, the openstreet map data will be filtered to include relevant highway attribute for the latter vehicle types. Residental is additionally excluded for computation efficiency (large number of residential objects) and the less influential nature of the attribute (road within a residential area that gives the public access to one or multiple residences).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter Thai Openstreet Map data by highway types \nth_road_flt <- th_road %>%\n  filter(highway %in% c('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified',  # Roads\n                        'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link',  # Link Roads\n                        'living_street', 'road', 'path'\n                        ) \n         ) %>%\n  st_set_crs(., 4326) %>%\n  st_transform(crs = 32647) \nglimpse(th_road_flt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 255,168\nColumns: 15\n$ name       <chr> \"ถนนฉลองกรุง\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวัณ 1\", NA, NA, NA, …\n$ name_en    <chr> \"Chalong Krung Road\", NA, \"Chalong Krung Road\", \"Erawan 1 R…\n$ highway    <chr> \"secondary\", \"secondary_link\", \"secondary\", \"tertiary\", \"pa…\n$ surface    <chr> \"paved\", NA, \"concrete\", NA, \"unpaved\", \"unpaved\", NA, NA, …\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"4\", NA, NA, NA, NA…\n$ lanes      <chr> NA, NA, \"2\", NA, NA, NA, NA, NA, \"1\", \"1\", \"1\", NA, NA, NA,…\n$ oneway     <chr> \"yes\", \"yes\", \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ bridge     <chr> NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ layer      <chr> NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ source     <chr> NA, NA, \"Bing\", NA, \"GPS\", \"GPS\", NA, NA, NA, \"survey\", \"di…\n$ name_th    <chr> \"ถนนฉลองกรุง\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวัณ 1\", NA, NA, NA, …\n$ osm_id     <dbl> 1125681229, 472283206, 116847248, 378672881, 1238351123, 12…\n$ osm_type   <chr> \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((693686.1 ..., MULTILINEST…\n```\n\n\n:::\n:::\n\n\n\n`st_intersects` is then used to return openstreet map objects that are within the study area.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Use st_union to get overall study area boundary\nth_bound_union <- th_bound_l3_flt %>%\n  st_union()\n\n# Use st_intersects to get roads within the study area\nth_roads_intersects <- st_intersects(th_road_flt, th_bound_union)\n\n# Get index mask of roads objects that intersects with study area \nroads_logical <- lengths(th_roads_intersects) > 0\n# Filter openstreet map with the index mask\nth_roads_bmr <- th_road_flt[roads_logical, ]\n\n\nglimpse(th_roads_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 36,472\nColumns: 15\n$ name       <chr> \"ถนนฉลองกรุง\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวัณ 1\", \"ถนนลำลูกกา\",…\n$ name_en    <chr> \"Chalong Krung Road\", NA, \"Chalong Krung Road\", \"Erawan 1 R…\n$ highway    <chr> \"secondary\", \"secondary_link\", \"secondary\", \"tertiary\", \"se…\n$ surface    <chr> \"paved\", NA, \"concrete\", NA, NA, NA, NA, NA, \"asphalt\", NA,…\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ lanes      <chr> NA, NA, \"2\", NA, \"3\", \"3\", \"3\", \"3\", \"3\", NA, NA, NA, NA, N…\n$ oneway     <chr> \"yes\", \"yes\", \"yes\", NA, \"yes\", \"yes\", \"yes\", \"yes\", \"yes\",…\n$ bridge     <chr> NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, \"yes\", NA, N…\n$ layer      <chr> NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, \"1\", NA, NA, N…\n$ source     <chr> NA, NA, \"Bing\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Bi…\n$ name_th    <chr> \"ถนนฉลองกรุง\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวัณ 1\", \"ถนนลำลูกกา\",…\n$ osm_id     <dbl> 1125681229, 472283206, 116847248, 378672881, 1312138113, 13…\n$ osm_type   <chr> \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((693686.1 ..., MULTILINEST…\n```\n\n\n:::\n:::\n\n\n\n::: panel-tabset\n# Bangkok\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use st_union to get Bangkok boundary\nbk_bound_union <- th_bound_l3_flt  %>%\n  filter(ADM1_EN == \"Bangkok\") %>%\n  st_union()\n\n# Use st_intersects to get roads within Bangkok\nbk_roads_intersects <- st_intersects(th_road_flt, bk_bound_union)\n\n# Get index mask of roads objects that intersects with Bangkok\nroads_logical_bk <- lengths(bk_roads_intersects) > 0\n# Filter openstreet map with the index mask\nth_roads_bk <- th_road_flt[roads_logical_bk, ]\n```\n:::\n\n\n\n# Nonthaburi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use st_union to get Nonthaburi boundary\nntb_bound_union <- th_bound_l3_flt  %>%\n  filter(ADM1_EN == \"Nonthaburi\") %>%\n  st_union()\n\n# Use st_intersects to get roads within Nonthaburi\nntb_roads_intersects <- st_intersects(th_road_flt, ntb_bound_union)\n\n# Get index mask of roads objects that intersects with Nonthaburi\nroads_logical_ntb <- lengths(ntb_roads_intersects) > 0\n# Filter openstreet map with the index mask\nth_roads_ntb <- th_road_flt[roads_logical_ntb, ]\n```\n:::\n\n\n\n# Pathum Thani\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use st_union to get Pathum Thani boundary\npt_bound_union <- th_bound_l3_flt  %>%\n  filter(ADM1_EN == \"Pathum Thani\") %>%\n  st_union()\n\n# Use st_intersects to get roads within Pathum Thani\npt_roads_intersects <- st_intersects(th_road_flt, pt_bound_union)\n\n# Get index mask of roads objects that intersects with Pathum Thani\nroads_logical_pt <- lengths(pt_roads_intersects) > 0\n# Filter openstreet map with the index mask\nth_roads_pt <- th_road_flt[roads_logical_pt, ]\n```\n:::\n\n\n\n# Samut Prakan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use st_union to get Samut Prakan boundary\nsp_bound_union <- th_bound_l3_flt  %>%\n  filter(ADM1_EN == \"Samut Prakan\") %>%\n  st_union()\n\n# Use st_intersects to get roads within Samut Prakan\nsp_roads_intersects <- st_intersects(th_road_flt, sp_bound_union)\n\n# Get index mask of roads objects that intersects with Samut Prakan\nroads_logical_sp <- lengths(sp_roads_intersects) > 0\n# Filter openstreet map with the index mask\nth_roads_sp <- th_road_flt[roads_logical_sp, ]\n```\n:::\n\n\n\n# Samut Sakhon\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use st_union to get Samut Sakhon boundary\nss_bound_union <- th_bound_l3_flt  %>%\n  filter(ADM1_EN == \"Samut Sakhon\") %>%\n  st_union()\n\n# Use st_intersects to get roads within Samut Sakhon\nss_roads_intersects <- st_intersects(th_road_flt, ss_bound_union)\n\n# Get index mask of roads objects that intersects with Samut Sakhon\nroads_logical_ss <- lengths(ss_roads_intersects) > 0\n# Filter openstreet map with the index mask\nth_roads_ss <- th_road_flt[roads_logical_ss, ]\n```\n:::\n\n\n\n# Nakhon Pathom\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use st_union to get Nakhon Pathom boundary\nnp_bound_union <- th_bound_l3_flt  %>%\n  filter(ADM1_EN == \"Nakhon Pathom\") %>%\n  st_union()\n\n# Use st_intersects to get roads within Nakhon Pathom\nnp_roads_intersects <- st_intersects(th_road_flt, np_bound_union)\n\n# Get index mask of roads objects that intersects with Nakhon Pathom\nroads_logical_np <- lengths(np_roads_intersects) > 0\n# Filter openstreet map with the index mask\nth_roads_np <- th_road_flt[roads_logical_np, ]\n```\n:::\n\n\n:::\n\nThe processed openstreet map dataset is then exported in a similar fashion\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Export to processed sub-folder as RDS\nwrite_rds(th_roads_bmr, 'data/processed/th_osm.rds')\n\n# Bangkok\nwrite_rds(th_roads_bk, 'data/processed/th_osm_bk.rds')\n\n# Nonthaburi\nwrite_rds(th_roads_ntb, 'data/processed/th_osm_ntb.rds')\n\n# Pathum Thani\nwrite_rds(th_roads_pt, 'data/processed/th_osm_pt.rds')\n\n# Samut Prakan\nwrite_rds(th_roads_sp, 'data/processed/th_osm_sp.rds')\n\n# Samut Sakhon\nwrite_rds(th_roads_ss, 'data/processed/th_osm_ss.rds')\n\n# Nakhon Pathom\nwrite_rds(th_roads_np, 'data/processed/th_osm_np.rds')\n```\n:::\n\n\n\n# 2. Exploratory Data Analysis\n\n## 2.1 Setting Up Environtment from Processed Datasets\n\nFirst, we clear the R console, then load in the processed datasets. This is a suitable starting point to bypass the long loading/processing time of the various large datasets.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clear R console\nrm(list = ls(all.names = TRUE))\n\n# Set seed to ensure reproducibility of all subsequent analysis\nset.seed(42)\n```\n:::\n\n\n\n::: panel-tabset\n# Accidents\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nra_sf <- read_rds('data/processed/th_acc.rds')\n\n# Check data\nglimpse(ra_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 12,986\nColumns: 17\n$ acc_code                    <dbl> 571882, 600001, 605043, 629691, 571887, 59…\n$ incident_datetime           <dttm> 2019-01-01 02:25:00, 2019-01-01 03:00:00,…\n$ report_datetime             <dttm> 2019-01-02 17:32:00, 2019-01-05 10:33:00,…\n$ province_th                 <chr> \"นครปฐม\", \"นนทบุรี\", \"สมุทรปราการ\", \"กรุงเทพมห…\n$ province_en                 <chr> \"Nakhon Pathom\", \"Nonthaburi\", \"Samut Prak…\n$ agency                      <chr> \"department of rural roads\", \"department o…\n$ route                       <chr> \"แยกทางหลวงหมายเลข 4 (กม.ที่ 51+920) - บ้านวัด…\n$ vehicle_type                <chr> \"motorcycle\", \"private/passenger car\", \"pr…\n$ presumed_cause              <chr> \"speeding\", \"speeding\", \"running red light…\n$ accident_type               <chr> \"rollover/fallen on straight road\", \"rollo…\n$ number_of_vehicles_involved <dbl> 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 2, …\n$ number_of_fatalities        <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, …\n$ number_of_injuries          <dbl> 2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, …\n$ weather_condition           <chr> \"clear\", \"clear\", \"clear\", \"clear\", \"clear…\n$ road_description            <chr> \"straight road\", \"straight road\", \"other\",…\n$ slope_description           <chr> \"no slope\", \"no slope\", \"other\", \"other\", …\n$ geometry                    <POINT [m]> POINT (627012.3 1533381), POINT (655…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check crs\nst_crs(ra_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n\n# Administrative Boundary\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nth_bound_sf <- read_rds('data/processed/th_bound_l3.rds')\n\n# Check data\nglimpse(th_bound_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 477\nColumns: 23\n$ Shape_Leng <dbl> 0.04769920, 0.03355050, 0.01728931, 0.01904576, 0.01523190,…\n$ Shape_Area <dbl> 1.284175e-04, 6.068479e-05, 1.769761e-05, 1.920433e-05, 1.2…\n$ ADM3_EN    <chr> \"Phraborom Maharatchawang\", \"Wang Burapha Phirom\", \"Wat Rat…\n$ ADM3_TH    <chr> \"พระบรมมหาราชวัง\", \"วังบูรพาภิรมย์\", \"วัดราชบพิธ\", \"สำราญราษฎร์\", \"…\n$ ADM3_PCODE <chr> \"TH100101\", \"TH100102\", \"TH100103\", \"TH100104\", \"TH100105\",…\n$ ADM3_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\",…\n$ ADM2_TH    <chr> \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\",…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\",…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((661579 1521..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check crs\nst_crs(th_bound_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n\n# Openstreet Map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nth_osm_sf <- read_rds('data/processed/th_osm.rds') %>%\n  st_cast(\"LINESTRING\") # Cast as linestring as \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in st_cast.sf(., \"LINESTRING\"): repeating attributes for all\nsub-geometries for which they may not be constant\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check data\nglimpse(th_osm_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 36,472\nColumns: 15\n$ name       <chr> \"ถนนฉลองกรุง\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวัณ 1\", \"ถนนลำลูกกา\",…\n$ name_en    <chr> \"Chalong Krung Road\", NA, \"Chalong Krung Road\", \"Erawan 1 R…\n$ highway    <chr> \"secondary\", \"secondary_link\", \"secondary\", \"tertiary\", \"se…\n$ surface    <chr> \"paved\", NA, \"concrete\", NA, NA, NA, NA, NA, \"asphalt\", NA,…\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ lanes      <chr> NA, NA, \"2\", NA, \"3\", \"3\", \"3\", \"3\", \"3\", NA, NA, NA, NA, N…\n$ oneway     <chr> \"yes\", \"yes\", \"yes\", NA, \"yes\", \"yes\", \"yes\", \"yes\", \"yes\",…\n$ bridge     <chr> NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, \"yes\", NA, N…\n$ layer      <chr> NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, \"1\", NA, NA, N…\n$ source     <chr> NA, NA, \"Bing\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Bi…\n$ name_th    <chr> \"ถนนฉลองกรุง\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวัณ 1\", \"ถนนลำลูกกา\",…\n$ osm_id     <dbl> 1125681229, 472283206, 116847248, 378672881, 1312138113, 13…\n$ osm_type   <chr> \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l…\n$ geometry   <LINESTRING [m]> LINESTRING (693686.1 151979..., LINESTRING (6929…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check crs\nst_crs(th_osm_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n:::\n\n## 2.2 Microsoft Power Bi Visualization\n\n::: {style=\"position: relative; width: 100%; height: 0; padding-bottom: 56.25%;\"}\n<iframe title=\"Geospatial TakeHome Ex01\" src=\"https://app.powerbi.com/view?r=eyJrIjoiZmMxMTNjMzEtYzhmMy00NTgwLTlkMjctODE1ZTA5YjNmN2E3IiwidCI6ImRmNGU4MzA3LWRjNjQtNDcyYS1iNGI1LWE2ZGQ2YmExMTU2NiIsImMiOjEwfQ%3D%3D\" frameborder=\"0\" allowFullScreen=\"true\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\">\n\n</iframe>\n:::\n\nFrom the Power Bi visualization, several observations can be made.\\\n- Most of the accidents are presumably caused by speeding (\\~78%). This is consistent even across province, different temporal factors (i.e. day of week, season, time of day) and environmental factors (i.e. road description, weather condition).\\\n- Similarly, most accidents occur on straight roads (\\~85%). That is also observable through the map visualization as accidents occur on long stretches of road. This is also consistent across location, temporal and behavioral factors.\\\n- Interestingly, accidents involving rainy conditions have a spike during darker parts of the day (\\~19:00-00:00)\\\n- Accidents is fairly distributed across season and different days of the week.\\\n- While accidents tend to occur more during the early parts of the day (\\~7:00-11:00), the spikes are more visible when looking at the accidents across time, with large increases in certain dates (i.e. 50 accidents on 29th Dec 2019)\n\n## 2.3 Other Explorations\n\nLets try to find out the nearest neighbour distance of each accident. Knowing the distribution of these distances will be useful for determining the parameter values of subsequent analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simple EDA\ntable(th_osm_sf$highway)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      motorway  motorway_link           path        primary   primary_link \n          1148           1539           3632           4513           1868 \n          road      secondary secondary_link       tertiary  tertiary_link \n             7           6207           1662           5427            388 \n         trunk     trunk_link   unclassified \n          1919            881           7281 \n```\n\n\n:::\n\n```{.r .cell-code}\nra_ppp <- as.ppp(ra_sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in as.ppp.sf(ra_sf): only first attribute column is used for marks\n```\n\n\n:::\n\n```{.r .cell-code}\nnn_distances <- nndist(ra_ppp)\n\nhist(nn_distances, breaks = 100, main = \"Nearest Neighbour Distance Distribution\",\n     xlab = \"Distance (meters)\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsummary(nn_distances)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n   0.002    1.262   13.048   73.438   46.636 7734.754 \n```\n\n\n:::\n:::\n\n\n\nKnowing that each accident occur very close to one another (median of \\~13 meters),\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nra_sf$Time <- as.POSIXct(ra_sf$incident_datetime, fomat = \"%Y/%m/%d\")\nstart <- as.POSIXct(\"2019/01/01\", format = \"%Y/%m/%d\")\nra_sf$Time <- difftime(ra_sf$Time, start, units = \"days\")\nra_sf$Time <- as.numeric(ra_sf$Time)\nra_sf$Time_2019 <- as.POSIXct(paste(\"2019\", format(ra_sf$incident_datetime, \"%m/%d\")), format = \"%Y %m/%d \")\nra_sf$Time_2019 <- difftime(ra_sf$Time_2019, start, units = \"days\")\nra_sf$Time_2019 <- as.numeric(ra_sf$Time_2019)\n\n\nyears <- as.character(2019:2022)\nmonths <- as.character(1:12)\nmonths <- ifelse(nchar(months) == 1, paste0(\"0\", months), months)\n# Create a list of month start dates for each year\nmonths_starts_labs <- outer(years, months, paste, sep = \"/\")\nmonths_starts_labs <- as.vector(t(months_starts_labs))  # Flatten the matrix\n\n# Convert month start labels to POSIXct and then to numeric days\nmonths_starts_num <- as.POSIXct(paste0(months_starts_labs, \"/01\"), format = \"%Y/%m/%d\")\nmonths_starts_num <- difftime(months_starts_num, start, units = \"days\")\nmonths_starts_num <- as.numeric(months_starts_num)\n\n# Create shorter month labels without the year\nmonths_starts_labs_short <- gsub(\"^\\\\d{4}/\", \"\", months_starts_labs)\n\n# Plot the histogram using ggplot2\nggplot(ra_sf) + \n  geom_histogram(aes(x = Time), bins = 30, color = \"white\") + \n  scale_x_continuous(breaks = months_starts_num, labels = months_starts_labs_short) +\n  labs(x = \"Months\", y = \"Accidents\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- rep(1,nrow(ra_sf))\nsamples <- seq(0, max(ra_sf$Time), 0.5)\n\ntime_kernel_values <- data.frame(\n  bw_10 = tkde(ra_sf$Time, w = w, samples = samples, bw = 10, kernel_name = \"quartic\"),\n  bw_20 = tkde(ra_sf$Time, w = w, samples = samples, bw = 20, kernel_name = \"quartic\"),\n  bw_30 = tkde(ra_sf$Time, w = w, samples = samples, bw = 30, kernel_name = \"quartic\"),\n  bw_40 = tkde(ra_sf$Time, w = w, samples = samples, bw = 40, kernel_name = \"quartic\"),\n  bw_50 = tkde(ra_sf$Time, w = w, samples = samples, bw = 50, kernel_name = \"quartic\"),\n  bw_60 = tkde(ra_sf$Time, w = w, samples = samples, bw = 60, kernel_name = \"quartic\"),\n  time = samples\n)\n\ndf_time <- reshape2::melt(time_kernel_values,id.vars = \"time\")\ndf_time$variable <- as.factor(df_time$variable)\n\nggplot(data = df_time) + \n  geom_line(aes(x = time, y = value)) +\n  scale_x_continuous(breaks = months_starts_num, labels = months_starts_labs) +\n  facet_wrap(vars(variable), ncol=2, scales = \"free\") + \n  theme(axis.text = element_text(size = 5))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\nWhile interesting patterns can be observed across different temporal bandwidths, variance is still very high. Let try to see the remove the year and view the temporal attribute as month of year instead.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nra_sf$start_of_year <- as.POSIXct(paste0(format(ra_sf$incident_datetime, \"%Y\"), \"-01-01\"), format = \"%Y-%m-%d\")\nra_sf$days_since_start_of_year <- as.numeric(difftime(ra_sf$incident_datetime, ra_sf$start_of_year, units = \"days\"))\n\nmonths <- as.character(1:12)\nmonths <- ifelse(nchar(months)==1, paste0(\"0\", months), months)\nmonths_starts_labs <- paste(\"2019/\",months,\"/01\", sep = \"\")\nmonths_starts_num <- as.POSIXct(months_starts_labs, format = \"%Y/%m/%d\")\nmonths_starts_num <- difftime(months_starts_num, start, units = \"days\")\nmonths_starts_num <- as.numeric(months_starts_num)\nmonths_starts_labs <- gsub(\"2019/\", \"\", months_starts_labs, fixed = TRUE)\n\nggplot(ra_sf) + \n  geom_histogram(aes(x = Time_2019), bins = 30, color = \"white\") + \n  scale_x_continuous(breaks = months_starts_num, labels = months_starts_labs)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 8 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\nNow that the we are only looking at months of year, it is clear that there are some months (\\~April-May and \\~October-November) that have more accidents.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- rep(1,nrow(ra_sf))\nsamples <- seq(0, max(ra_sf$days_since_start_of_year), 0.5)\n\ntime_kernel_values <- data.frame(\n  bw_10 = tkde(ra_sf$days_since_start_of_year, w = w, samples = samples, bw = 10, kernel_name = \"quartic\"),\n  bw_20 = tkde(ra_sf$days_since_start_of_year, w = w, samples = samples, bw = 20, kernel_name = \"quartic\"),\n  bw_30 = tkde(ra_sf$days_since_start_of_year, w = w, samples = samples, bw = 30, kernel_name = \"quartic\"),\n  bw_40 = tkde(ra_sf$days_since_start_of_year, w = w, samples = samples, bw = 40, kernel_name = \"quartic\"),\n  bw_50 = tkde(ra_sf$days_since_start_of_year, w = w, samples = samples, bw = 50, kernel_name = \"quartic\"),\n  bw_60 = tkde(ra_sf$days_since_start_of_year, w = w, samples = samples, bw = 60, kernel_name = \"quartic\"),\n  time = samples\n)\n\ndf_time <- reshape2::melt(time_kernel_values,id.vars = \"time\")\ndf_time$variable <- as.factor(df_time$variable)\n\nggplot(data = df_time) + \n  geom_line(aes(x = time, y = value)) +\n  scale_x_continuous(breaks = months_starts_num, labels = months_starts_labs) +\n  facet_wrap(vars(variable), ncol=2, scales = \"free\") + \n  theme(axis.text = element_text(size = 5))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\nFrom this, we can clearly see that there might be a seasonal bimodal trend captured with a temporal bandwidth of 30-40 days. The newly created temporal variable `days_since_start_of_year` will be used instead for subsequent temporal analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cartographic Quality of Bangkok Metropolitan Region\ntmap_style(\"classic\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"classic\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(th_bound_sf)+\n  tm_polygons(col = \"ADM1_EN\", palette = \"Set3\", title = \"Provinces\", border.col = \"black\", border.alpha = 0.5) +\n  tm_layout(main.title = \"Accidents across Bangkok Metropolitan Region\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Subnational Administrative Boundaries from HDX \\n and Accident data from Kaggle\", \n             position = c(\"left\", \"bottom\")) +\ntm_shape(ra_sf) +\n  tm_dots()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=1152}\n:::\n\n```{.r .cell-code}\n# Change back to default\ntmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n:::\n\n\n\nIt is important to note that given the context of the issue, it is not encouraged to perform any typical spatial point pattern analysis.\n\nFirst-order spatial point pattern analysis such as kernel density estimation and nearest neighbours (i.e. Clark-Evans test) may give an indication of whether the events are clustered, regular or randomly occur, possibly highlighting potential accident hotspots. On the other hand second-order spatial point pattern analysis may illustrate spatial dependencies indicating underlying hazard. Nevertheless, techniques under both analysis are likely to be misleading as it will be heavily biased.\n\nFrom the exploratory data analysis, it is clear that accidents are network constrained. This will induce misleading results as the above analysis techniques assume that events can occur throughout the study area. Therefore, density based analysis such as KDE will naturally cluster around roads, whereas second-order spatial point analysis such as the F-function will calculate the distribution of distances from random locations in the study area to the nearest point in the pattern (including locations impossible for road accident to occur).\n\nTherefore, network spatial point pattern analysis will be the fundamental analysis for this assi\n\n# 3 Network Spatial Point Pattern Analysis\n\nIn network spatial point pattern analysis, the goal is understand how events are distributed across the network. This comes with determining whether the events occur randomly, or in a clustered/regular pattern. NKDE will allow us to identify intensity of events across the network, highlighting potential hotspots, whereas network K-function will be used in the complete spatial randomness test. By filtering different factors (temporal, environmental, behavioral) while running those analysis, we can then see if and how those factors affect accidents.\n\n## 3.1 Network Kernel Density Estimation\n\n## 3.1.1 Preparing objects required for performing NKDE\n\nBefore generating lixels with `lixelize_lines()` of spNetwork, we need to know what is the appropriate length of a lixel.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check \nth_road_lengths <- st_length(th_osm_sf)\nsummary(th_road_lengths)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n    0.133    30.298   113.356   397.255   406.497 30918.357 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot histogram of road lengths\nhist(th_road_lengths, breaks = 100, main = \"Distribution of Road Segment Lengths\",\n     xlab = \"Road Segment Length (meters)\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\nBased on the above, 200 meters will be selected as the lixel length, as it is more than most road segments (median 113 meters) and it is not too computationally intensive. The minimum lixel length in this case will be the default 1/10 of lixel length.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create lixels\nth_lixels <- lixelize_lines(th_osm_sf, 200)\n\n# Create samples\nth_samples <- lines_center(th_lixels) \n```\n:::\n\n\n\n## 3.1.2 Bandwidth selction for performing NKDE\n\nMain points of consideration for running a network KDE are:\\\n- Adaptive: False due to the computation load and also because the entire study area share a relatively similar network (urban throughout) with lesser accident variation across the network.\\\n- kernel: quartic as it provides a good balance between local and global estimation\\\n- method: simple as most accidents happen along the road rather than at intersections\n\nWith those in mind, bandwidth selection will be determined through `bw_cv_likelihood_calc` of spNetwork, using likelihood cross validation (aims to find a bandwidth that gives the most similar results when an event is removed). The bandwidth ranges from 50 to 425 based on the nearest neighbour analysis. 50 meters cover most distances between 2 accidents (median of 13 meters), and 1000 meters is a good coverage given the study area (\\~7700 square km).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform cross validation for bandwidth selection\nth_bws_selection_cv <- bw_cv_likelihood_calc(\n  lines = th_osm_sf, \n  events = ra_sf,\n  w = rep(1, nrow(ra_sf)),\n  kernel_name = \"quartic\",\n  bws = seq(50,1000,50),\n  method = \"simple\", \n  digits = 1, \n  tol = 0.1,\n  grid_shape = c(5,5), \n  max_depth = 8,\n  agg = 5, \n  sparse = TRUE, # Slower but require less memory\n  verbose = TRUE)\n```\n:::\n\n\n\nCV results are exported for ease of rendering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Export output object and read it in to minimize rendering time\n# write_rds(th_bws_selection_cv, 'data/output/th_bws_selection_cv.rds') # Uncomment when running the CV again\n\n# Read in output object\nth_bws_selection_cv <- read_rds('data/output/th_bws_selection_cv.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize CV Scores\nplot(th_bws_selection_cv$bw, th_bws_selection_cv$cv_scores, \n     type = \"o\", col = \"blue\", xlab = \"Bandwidth (bw)\", ylab = \"CV Scores\",\n     main = \"CV Scores vs Bandwidth\", ylim = c(min(th_bws_selection_cv$cv_scores) - 50, max(th_bws_selection_cv$cv_scores) + 50),\n     pch = 19, lty = 1)\ntext(th_bws_selection_cv$bw, th_bws_selection_cv$cv_scores, \n     labels = round(th_bws_selection_cv$cv_scores, 0), pos = 3, cex = 0.8, col = \"black\")\ngrid()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\nWith this in mind, 500 meters is selected as the bandwidth. Although the cross validation scores favor larger bandwidth, 500 is selected as a trade off between cv performance and potential overfitting.\n\n## 3.1.3 Performing NKDE\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuture::plan(future::multisession(workers=8))\n# Set global option for parallel-safe random number generation\noptions(future.seed = TRUE)\n\n# Perform multi-core NKDE\nth_densities <- nkde.mc(th_osm_sf,\n                  events = ra_sf,\n                  w = rep(1, nrow(ra_sf)),\n                  samples = th_samples,\n                  kernel_name = \"quartic\",\n                  bw = 500,\n                  div= \"bw\",\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 0.1,\n                  grid_shape = c(5,5),\n                  max_depth = 8,\n                  agg = 5,\n                  sparse = TRUE, # Slower but require less memory\n                  verbose = TRUE)\n```\n:::\n\n\n\nResults are exported for ease of rendering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # # Export output object and read it in to minimize rendering time\n# write_rds(th_densities, 'data/output/th_nkde_densities.rds') # Uncomment when running the NKDE again\n\n# Read in output object\nth_densities <- read_rds('data/output/th_nkde_densities.rds')\n\n# Check density values\nsummary(th_densities)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n0.000e+00 0.000e+00 0.000e+00 2.268e-06 9.410e-08 3.836e-04 \n```\n\n\n:::\n:::\n\n\n\nGiven the small values of the densities, scaling adjustments will be made to improve the readability after appending the results to the respective lixels and samples.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Append results to the sample and lixel\nth_samples$density <- th_densities\nth_lixels$density <- th_densities\n\n# Rescale by 1e6\nth_samples$density <- th_samples$density*1000000\nth_lixels$density <- th_lixels$density*1000000\n```\n:::\n\n\n\nDue to the distribution of density having very small values, log transformation will be made onto the density to improve the contrast\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Log transform the density values (small offset to avoid log(0))\nth_lixels$log_density <- log(th_lixels$density + 0.000001)\n\n# Create overall TH boundary\nth_bound_all <- th_bound_sf %>%\n  st_union()\n\n# Visualize results\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(th_lixels)+\n  tm_lines(col=\"log_density\", palette = 'YlOrRd', style = \"cont\", title.col = \"Log Density\") +\ntm_shape(th_bound_all) +\n  tm_borders() + \ntm_layout(\n    title = \"Network Kernel Density Estimation\", \n    title.size = 1.5,                            \n    legend.title.size = 1.2,                      \n    legend.text.size = 0.8,                       \n    title.position = c(\"center\", \"top\"),         \n    frame = TRUE                                  \n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-44-1.png){width=1152}\n:::\n:::\n\n\n\nWhile the plot is largely filled with areas with low density, it can be seen that there are some patches of roads with higher density, signifying potential hotspots for accidents.\n\n## 3.2 Temporal Network Spatial Point Patterns Analysis\n\nAlthough network kernel density estimation is useful, it will be interesting to see how temporal effects play into the analysis.\n\n### 3.2.1 Bandwidth selction for performing TNKDE\n\nSimilar to NKDE, cross validation is also used to determine an appropriate bandwidth prior to performing TNKDE\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform cross validation for bandwidth selection\ntnkde_cv_scores <- bw_tnkde_cv_likelihood_calc(\n  bws_net = seq(200,2000,100),\n  bws_time = seq(10,100,10),\n  lines = th_osm_sf,\n  events = ra_sf,\n  time_field = \"days_since_start_of_year\",\n  w = rep(1, nrow(ra_sf)),\n  kernel_name = \"quartic\",\n  method = \"simple\",\n  diggle_correction = FALSE,\n  study_area = NULL,\n  max_depth = 10,\n  digits = 2,\n  tol = 0.1,\n  agg = 5,\n  sparse=TRUE,\n  grid_shape=c(5,5),\n  sub_sample=1,\n  verbose = TRUE,\n  check = TRUE)\n```\n:::\n\n\n\nCV results are exported for ease of rendering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Export output object and read it in to minimize rendering time\n# write_rds(tnkde_cv_scores, 'data/output/tnkde_cv_scores.rds') # Uncomment when running the CV again\n\n# Read in output object\ntnkde_cv_scores <- read_rds('data/output/tnkde_cv_scores.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(tnkde_cv_scores)\n```\n\n::: {.cell-output-display}\n\n\n|     |        10|        20|        30|         40|         50|         60|         70|         80|         90|        100|\n|:----|---------:|---------:|---------:|----------:|----------:|----------:|----------:|----------:|----------:|----------:|\n|200  | -488.8391| -395.9844| -340.6128| -300.32529| -272.37465| -253.29978| -237.41154| -225.53148| -216.71559| -207.00785|\n|300  | -442.0746| -344.0055| -289.4478| -252.64892| -227.74359| -209.93879| -195.81919| -185.44796| -177.86708| -169.13565|\n|400  | -408.2525| -310.4303| -257.2129| -222.20055| -198.65273| -183.17807| -170.50691| -160.79403| -153.64465| -145.55686|\n|500  | -376.7500| -281.8185| -231.3860| -200.35611| -177.89627| -163.07055| -151.20934| -142.08086| -135.36448| -128.07184|\n|600  | -351.0659| -257.4746| -211.3567| -182.05483| -161.29048| -147.79331| -136.83527| -128.81571| -122.37053| -115.56274|\n|700  | -329.7402| -239.5227| -194.6599| -167.74013| -148.05241| -135.25297| -124.93592| -117.81671| -111.38114| -104.99972|\n|800  | -310.2521| -224.1953| -182.2671| -156.32081| -137.90432| -125.64685| -116.01695| -109.64280| -103.37158|  -96.99915|\n|900  | -294.6411| -210.7383| -170.6255| -146.01396| -128.86754| -116.98706| -108.04640| -102.09894|  -96.14742|  -90.30192|\n|1000 | -278.0828| -197.9278| -159.7744| -136.54561| -120.31005| -109.17115| -100.55522|  -94.71600|  -89.50149|  -83.76388|\n|1100 | -265.1032| -187.0468| -151.3857| -129.43137| -113.99407| -103.85638|  -95.14410|  -89.15736|  -84.41659|  -79.20519|\n|1200 | -253.4037| -178.0653| -144.4721| -123.31912| -108.68239|  -99.12883|  -90.78507|  -84.69887|  -79.96060|  -75.11728|\n|1300 | -242.6488| -169.3980| -137.5605| -117.21277| -102.58253|  -93.14570|  -85.06518|  -79.24283|  -74.76904|  -70.03581|\n|1400 | -233.1655| -161.5255| -130.7123| -111.78634|  -98.57508|  -89.40477|  -81.48844|  -75.98101|  -71.30248|  -66.93541|\n|1500 | -224.7279| -154.2199| -124.5803| -106.87290|  -93.99033|  -85.34958|  -78.32448|  -73.08074|  -68.56236|  -64.14709|\n|1600 | -217.5111| -148.2366| -119.0356| -102.12499|  -89.35560|  -81.03575|  -74.53567|  -69.55822|  -65.45832|  -61.35935|\n|1700 | -208.9319| -142.1506| -113.9053|  -97.94673|  -85.75761|  -77.44410|  -71.16006|  -66.49763|  -62.55803|  -58.67018|\n|1800 | -202.1349| -136.4325| -109.0920|  -93.72484|  -82.22093|  -74.38092|  -68.46565|  -63.96237|  -60.49371|  -56.86868|\n|1900 | -196.9746| -132.8050| -105.4827|  -89.96618|  -78.52163|  -70.73879|  -65.29434|  -61.05605|  -57.59202|  -54.38596|\n|2000 | -189.1396| -127.6685| -101.5596|  -86.31465|  -75.34629|  -67.87863|  -62.96138|  -59.04090|  -55.73670|  -52.58692|\n\n\n:::\n:::\n\n\n\nWith this in mind, the bandwidth selected is 100 days and 1000 meters. While a larger bandwidth is favored by the cross validation, the concern is on the overfitting risks.\n\n### 3.2.2 Performing TNKDE\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# choosing sample in times (every 10 days)\nsample_time <- seq(0, max(ra_sf$days_since_start_of_year), 10)\n\n\ntnkde_densities <- tnkde(lines = th_osm_sf,\n                   events = ra_sf,\n                   time_field = \"days_since_start_of_year\",\n                   w = rep(1, nrow(ra_sf)), \n                   samples_loc = th_samples,\n                   samples_time = sample_time, \n                   kernel_name = \"quartic\",\n                   bw_net = 1000, bw_time = 100,\n                   method = \"simple\",\n                   div = \"bw\", max_depth = 8,\n                   digits = 2, tol = 0.1,\n                   agg = 5, \n                   grid_shape = c(5,5), \n                   verbose  = TRUE)\n```\n:::\n\n\n\nResults are saved for ease of rendering\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Export output object and read it in to minimize rendering time\n# write_rds(tnkde_densities, 'data/output/tnkde_densities.rds') # Uncomment when running the TNKDE again\n\n# Read in output object\ntnkde_densities <- read_rds('data/output/tnkde_densities.rds')\n```\n:::\n\n\n\nFor ease of visualization, a gif will be created to illustrate how the intensity changes throughout the year.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a color palette for all the densities\nall_densities <- c(tnkde_densities)\ncolor_breaks <- classIntervals(all_densities, n = 10, style = \"kmeans\")\n\n# Generating a map at each sample time\nall_maps <- lapply(1:ncol(tnkde_densities), function(i){\n  time <- sample_time[[i]]\n  date <- as.Date(start) + time\n  \n  formatted_date <- format(date, \"%m-%d\")  # Display only month and day\n  \n  th_samples$density <- tnkde_densities[,i]\n  \n  map1 <- tm_shape(th_samples) + \n    tm_dots(col = \"density\", size = 0.01,\n            breaks = color_breaks$brks, palette = viridis(10)) + \n    tm_layout(legend.show = FALSE, \n              main.title = as.character(formatted_date),  # Use formatted month-day date\n              main.title.size = 0.5)\n  return(map1)\n})\n\n\ntmap_animation(all_maps, filename = \"data/images/animated_map.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize gif\nknitr::include_graphics(\"images/animated_map.gif\")\n```\n\n::: {.cell-output-display}\n![](images/animated_map.gif)\n:::\n:::\n\n\n\nA few observations can be made from the temporal network kernel density estimation gif:\\\n- Throughout the year, there are certain portions of the network that are consistently denser. These are notably straight roads (Rama II Road, Kanchanaphisek Road, etc), which may induce more drivers to speed resulting in accidents.\\\n- There are large variations in Pathum Thani's road network over the year, suggesting potential behavioral tendencies for drivers within that region that led to accidents.\\\n- Individual hotspots that appear over the study area at different parts of the year highlights potential seasonal issues.\n\n## 3.3 Network Constrained G- and K-Function Analysis\n\nParameters selected are made largely with the goal of reducing computational load.\\\nHo: The observed spatial point events are randomly distributed over the BMR network.\\\nH1: The observed spatial point events are not randomly distributed over the BMR network.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_accidents_th <- kfunctions(th_osm_sf, \n                             ra_sf,\n                             start = 0, \n                             end = 500, \n                             step = 50, \n                             width = 50, \n                             nsim = 49, \n                             # resolution = 100,\n                             verbose = TRUE,\n                             agg = 200,\n                             conf_int = 0.05)\n```\n:::\n\n\n\nResults are saved for ease of rendering\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Export output object and read it in to minimize rendering time\n# write_rds(kfun_accidents_th, 'data/output/th_kfun.rds') # Uncomment when running the Kfunction again\n\n# Read in output object\nkfun_accidents_th <- read_rds('data/output/th_kfun.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_accidents_th$plotk +\n  ggtitle(\"K-Function Plot of all accidents in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_accidents_th$plotg +\n  ggtitle(\"G-Function Plot of all accidents in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n\nFrom both plots, the observed values are consistently below the confidence envelope. Therefore we can reject the null hypothesis and conclude that accidents follow a regular pattern across all distances.\n\n## 3.4 Behavioral Factors\n\nLets see how behavioral factors can affect the occurrence of accidents. Complete spatial randomness test will be done separately for accidents that are presumably caused by speeding, and accidents caused by other reasons.\n\nHo: The observed spatial point events are randomly distributed over the BMR network.\\\nH1: The observed spatial point events are not randomly distributed over the BMR network.\n\n::: panel-tabset\n# Speeding\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare filtered accidents for Speeding\nra_sf_bh_spd <- ra_sf %>%\n  filter(presumed_cause == 'speeding')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_bh_spd <- kfunctions(th_osm_sf, \n                          ra_sf_bh_spd,\n                          start = 0, \n                          end = 500, \n                          step = 50, \n                          width = 50, \n                          nsim = 49, \n                             # resolution = 100,\n                          verbose = TRUE,\n                          agg = 200,\n                          conf_int = 0.05)\n```\n:::\n\n\n\nResults are saved for ease of rendering\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Export output object and read it in to minimize rendering time\n# write_rds(kfun_bh_spd, 'data/output/kfun_bh_spd.rds') # Uncomment when running the Kfunction again\n\n# Read in output object\nkfun_bh_spd <- read_rds('data/output/kfun_bh_spd.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_bh_spd$plotk +\n  ggtitle(\"K-Function Plot of speeding related accidents in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_bh_spd$plotg +\n  ggtitle(\"G-Function Plot of speeding related accidents in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n\n\n# Non Speeding\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare filtered accidents for Speeding\nra_sf_bh_oth <- ra_sf %>%\n  filter(presumed_cause != 'speeding')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_bh_oth <- kfunctions(th_osm_sf, \n                          ra_sf_bh_oth,\n                          start = 0, \n                          end = 500, \n                          step = 50, \n                          width = 50, \n                          nsim = 49, \n                             # resolution = 100,\n                          verbose = TRUE,\n                          agg = 200,\n                          conf_int = 0.05)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Export output object and read it in to minimize rendering time\n# write_rds(kfun_bh_oth, 'data/output/kfun_bh_oth.rds') # Uncomment when running the Kfunction again\n\n# Read in output object\nkfun_bh_oth <- read_rds('data/output/kfun_bh_oth.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_bh_oth$plotk+\n  ggtitle(\"K-Function Plot of non-speeding related accidents in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_bh_oth$plotg +\n  ggtitle(\"G-Function Plot of non-speeding related accidents in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\n:::\n\nFor accidents involving speeding, given that both G- and K- observed values are below the envelope. Again, we will then reject the null hypothesis and conclude that accidents related to speeding follow a regular pattern across all distances.\n\nHowever, for accidents involving non-speeding related reasons, although K-observed values are consistently below the envelope, the G-values are within the envelope at a particular distance (~300 meters). This suggests a globally regular pattern (K-function alternative hypothesis), with localized randomness at a particular distance.\n\n## 3.5 Environmental Factors\n\n### 3.5.1 Road Type\n\n::: panel-tabset\n# Straight Roads\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare filtered accidents for straight roads\nra_sf_en_str <- ra_sf %>%\n  filter(road_description == 'straight road')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_en_str <- kfunctions(th_osm_sf, \n                          ra_sf_en_str,\n                          start = 0, \n                          end = 500, \n                          step = 50, \n                          width = 50, \n                          nsim = 49, \n                             # resolution = 100,\n                          verbose = TRUE,\n                          agg = 200,\n                          conf_int = 0.05)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Export output object and read it in to minimize rendering time\n# write_rds(kfun_en_str, 'data/output/kfun_en_str.rds') # Uncomment when running the Kfunction again\n\n# Read in output object\nkfun_en_str <- read_rds('data/output/kfun_en_str.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_en_str$plotk+\n  ggtitle(\"K-Function Plot of accidents on straight roads in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_en_str$plotg+\n  ggtitle(\"G-Function Plot of accidents on straight roads in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n\n\n# Other Road Types\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare filtered accidents for other roads\nra_sf_en_oth <- ra_sf %>%\n  filter(road_description != 'straight road')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_en_oth <- kfunctions(th_osm_sf, \n                          ra_sf_en_oth,\n                          start = 0, \n                          end = 500, \n                          step = 50, \n                          width = 50, \n                          nsim = 49, \n                             # resolution = 100,\n                          verbose = TRUE,\n                          agg = 200,\n                          conf_int = 0.05)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Export output object and read it in to minimize rendering time\n# write_rds(kfun_en_oth, 'data/output/kfun_en_oth.rds') # Uncomment when running the Kfunction again\n\n# Read in output object\nkfun_en_oth <- read_rds('data/output/kfun_en_oth.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_en_oth$plotk+\n  ggtitle(\"K-Function Plot of accidents on other road types in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_en_oth$plotg+\n  ggtitle(\"G-Function Plot of accidents on other road types in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\n:::\n\nFor accidents involving straight roads, given that both G- and K- observed values are below the envelope. Again, we will then reject the null hypothesis and conclude that accidents on straight roads follow a regular pattern across all distances.\n\nHowever, for accidents on other road types, although K-observed values are consistently below the envelope, the G-values are again within the envelope at a particular distance (\\~300-400 and 500 meters). This suggests a globally regular pattern (K-function alternative hypothesis), with localized randomness at a particular distance.\n\n### 3.5.2 Weather Condition\n\n::: panel-tabset\n\n# Clear Weather\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare filtered accidents for clear weather\nra_sf_wth_clr <- ra_sf %>%\n  filter(weather_condition == 'clear')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_wth_clr <- kfunctions(th_osm_sf, \n                          ra_sf_wth_clr,\n                          start = 0, \n                          end = 500, \n                          step = 50, \n                          width = 50, \n                          nsim = 49, \n                             # resolution = 100,\n                          verbose = TRUE,\n                          agg = 200,\n                          conf_int = 0.05)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Export output object and read it in to minimize rendering time\n# write_rds(kfun_wth_clr, 'data/output/kfun_wth_clr.rds') # Uncomment when running the Kfunction again\n\n# Read in output object\nkfun_wth_clr <- read_rds('data/output/kfun_wth_clr.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_wth_clr$plotk+\n  ggtitle(\"K-Function Plot of accidents during clear weather in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-79-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_wth_clr$plotg+\n  ggtitle(\"G-Function Plot of accidents during clear weather in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-80-1.png){width=672}\n:::\n:::\n\n\n\n# Other Weather\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare filtered accidents for clear weather\nra_sf_wth_oth <- ra_sf %>%\n  filter(weather_condition != 'clear')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_wth_oth <- kfunctions(th_osm_sf, \n                          ra_sf_wth_oth,\n                          start = 0, \n                          end = 500, \n                          step = 50, \n                          width = 50, \n                          nsim = 49, \n                             # resolution = 100,\n                          verbose = TRUE,\n                          agg = 200,\n                          conf_int = 0.05)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Export output object and read it in to minimize rendering time\n# write_rds(kfun_wth_oth, 'data/output/kfun_wth_oth.rds') # Uncomment when running the Kfunction again\n\n# Read in output object\nkfun_wth_oth <- read_rds('data/output/kfun_wth_oth.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_wth_oth$plotk+\n  ggtitle(\"K-Function Plot of accidents during other weather in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-84-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_wth_oth$plotg+\n  ggtitle(\"G-Function Plot of accidents during other weather in BMR: 50 simulations\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-85-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\nFor accidents during clear weather, given that both G- and K- observed values are below the envelope. Again, we will then reject the null hypothesis and conclude that accidents during clear weather follow a regular pattern across all distances.\n\nHowever, for accidents during other weather conditions, although K-observed values are consistently below the envelope, the G-values are have a mix of behaviors. It exhibits regular patterns under 200 meters, random pattern from 200-350 meters and clustered pattern abve 350 meters.\n\n# 4 Conclusion\n\nIn conclusion, it appears that a common cause of accidents are a mix of variables. Given good weather conditions and straight roads, drivers are more inclined to speed. With good underlying network infrastructure, this then translates to accidents happening across the network in a regular fashion.\n\nHowever, other factors also may contribute to accidents. Under less ideal weather conditions, drivers may encounter difficulties (other presumed cause) on more difficult roads (non-straight roads), especially around ~300 meters. This gives rise to a more random distribution as such factors may occur anywhere on the network. \n",
    "supporting": [
      "Take-Home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}